[{"/mnt/c/Users/luker/Documents/Github/midi-generator/src/index.js":"1","/mnt/c/Users/luker/Documents/Github/midi-generator/src/reportWebVitals.js":"2","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/App.js":"3","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/MidiDisplay.jsx":"4","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/Grid.jsx":"5","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/population.js":"6","/mnt/c/Users/luker/Documents/Github/midi-generator/src/store/store.js":"7","/mnt/c/Users/luker/Documents/Github/midi-generator/src/reducers/index.js":"8","/mnt/c/Users/luker/Documents/Github/midi-generator/src/reducers/populationReducer.js":"9","/mnt/c/Users/luker/Documents/Github/midi-generator/src/actions/actionTypes.js":"10","/mnt/c/Users/luker/Documents/Github/midi-generator/src/actions/populationActions.js":"11","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/ControlPanel.jsx":"12","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/DisplayNotes.jsx":"13","/mnt/c/Users/luker/Documents/Github/midi-generator/src/wdyr.js":"14","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/NewGeneration.jsx":"15","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/Test.jsx":"16","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/genome.js":"17","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/progression.js":"18","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/synth.js":"19","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/chords.js":"20","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/rythm.js":"21","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/note.js":"22"},{"size":685,"mtime":1612460910589,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1609178616793,"results":"25","hashOfConfig":"24"},{"size":846,"mtime":1615392793710,"results":"26","hashOfConfig":"24"},{"size":3992,"mtime":1615668173660,"results":"27","hashOfConfig":"24"},{"size":2022,"mtime":1615668103386,"results":"28","hashOfConfig":"24"},{"size":5936,"mtime":1614100006269,"results":"29","hashOfConfig":"24"},{"size":128,"mtime":1609711162012,"results":"30","hashOfConfig":"24"},{"size":166,"mtime":1609712534050,"results":"31","hashOfConfig":"24"},{"size":1179,"mtime":1614107965931,"results":"32","hashOfConfig":"24"},{"size":216,"mtime":1614865516536,"results":"33","hashOfConfig":"24"},{"size":546,"mtime":1614107972082,"results":"34","hashOfConfig":"24"},{"size":7636,"mtime":1615393597368,"results":"35","hashOfConfig":"24"},{"size":1751,"mtime":1614110435197,"results":"36","hashOfConfig":"24"},{"size":337,"mtime":1609975222260,"results":"37","hashOfConfig":"24"},{"size":1053,"mtime":1615393410613,"results":"38","hashOfConfig":"24"},{"size":1788,"mtime":1610308871105,"results":"39","hashOfConfig":"24"},{"size":541,"mtime":1610904788817,"results":"40","hashOfConfig":"24"},{"size":10461,"mtime":1615295723698,"results":"41","hashOfConfig":"24"},{"size":1008,"mtime":1615236360798,"results":"42","hashOfConfig":"24"},{"size":1711,"mtime":1610315645407,"results":"43","hashOfConfig":"24"},{"size":1559,"mtime":1611179340087,"results":"44","hashOfConfig":"24"},{"size":684,"mtime":1610308432816,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"o4f6f7",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"/mnt/c/Users/luker/Documents/Github/midi-generator/src/index.js",[],["94","95"],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/reportWebVitals.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/App.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/MidiDisplay.jsx",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/Grid.jsx",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/population.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/store/store.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/reducers/index.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/reducers/populationReducer.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/actions/actionTypes.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/actions/populationActions.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/ControlPanel.jsx",["96"],"import React, { useEffect, useState } from \"react\";\r\nimport { Jumbotron, Container, Row, Col } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  Card,\r\n} from \"@material-ui/core\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport { createPopulation } from \"../genetic/population\";\r\nimport { addSpeciman, deletePopulation } from \"../actions/populationActions\";\r\nimport NewGeneration from \"./NewGeneration\";\r\nimport { setTempo } from \"../genetic/synth\";\r\nimport { rythms } from \"../genetic/rythm\";\r\nimport qs from 'qs';\r\n\r\nfunction ControlPanel() {\r\n  const [generation, setGeneration] = useState(0);\r\n\r\n  const [state, setState] = useState({\r\n    populationSize: 8,\r\n    mutationChance: 0.1,\r\n    jazziness: 4,\r\n    numberOfNotes: 3,\r\n    progressionLength: 4,\r\n    windowmin: rythms[1],\r\n    windowmax: rythms[4],\r\n  });\r\n\r\n  const [tempo, settempo] = useState(120);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let disabled = 0;\r\n  if (generation > 0) disabled = 1;\r\n\r\n  const handleChange = (e) => {\r\n    let contraint = false;\r\n    let value = parseFloat(e.target.value);\r\n\r\n    if (value > 0) {\r\n      if (e.target.name === \"tempo\") {\r\n        settempo(value);\r\n        setTempo(value);\r\n      } else if (!contraint)\r\n        setState({\r\n          ...state,\r\n          [e.target.name]: value,\r\n        });\r\n    }\r\n  };\r\n\r\n  const updateGeneration = () => {\r\n    setGeneration(generation + 1);\r\n  };\r\n\r\n  const restart = () => {\r\n    setGeneration(0);\r\n    dispatch(deletePopulation());\r\n    createPopulation(\r\n      state.populationSize,\r\n      state.jazziness,\r\n      state.numberOfNotes,\r\n      {\r\n        min: rythms.indexOf(state.windowmin),\r\n        max: rythms.indexOf(state.windowmax),\r\n      },\r\n      state.progressionLength\r\n    ).map((x) => dispatch(addSpeciman(x)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (generation === 0) restart();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state]);\r\n\r\n  const isPL = qs.parse(window.location.search, { ignoreQueryPrefix: true }).lang==='pl'\r\n\r\n  return (\r\n    <Jumbotron className=\"p-4\">\r\n      <Container>\r\n        <Row>\r\n          <h2>{isPL ? \"Pokolenie\" : \"Generation\"}: {generation}</h2>\r\n        </Row>\r\n        <hr />\r\n        <Row className=\"p-3\">\r\n          <Col className=\"pb-1\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                name=\"populationSize\"\r\n                label={isPL ? \"Rozmiar populacji\" : \"Population size\"}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.populationSize}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 0, max: 1, step: 0.05 } }}\r\n                name=\"mutationChance\"\r\n                label={isPL ? \"Szansa mutacji\" : \"Mutation chance\"}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.mutationChance}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                name=\"tempo\"\r\n                label=\"Tempo\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={tempo}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                disabled={disabled}\r\n                name=\"progressionLength\"\r\n                label={isPL ? \"Długość frazy\" : \"Phrase length\"}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.progressionLength}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <InputLabel className=\"m-0\" shrink>\r\n                {isPL ? \"Min. długość nuty\" : \"Min. note length\"}\r\n              </InputLabel>\r\n              <Select\r\n                className=\"w-100\"\r\n                name=\"windowmin\"\r\n                value={state.windowmin}\r\n                onChange={handleChange}\r\n              >\r\n                {rythms.map((rythm, index) => {\r\n                  if (rythm < state.windowmax)\r\n                    return (\r\n                      <MenuItem key={index} value={rythm}>\r\n                        {rythm}\r\n                      </MenuItem>\r\n                    );\r\n                  else return null;\r\n                })}\r\n              </Select>\r\n              <InputLabel className=\"m-0\" shrink>\r\n                {isPL ? \"Max. długość nuty\" : \"Max. note length\"}\r\n              </InputLabel>\r\n              <Select\r\n                className=\"w-100\"\r\n                name=\"windowmax\"\r\n                value={state.windowmax}\r\n                onChange={handleChange}\r\n              >\r\n                {rythms.map((rythm, index) => {\r\n                  if (rythm > state.windowmin)\r\n                    return (\r\n                      <MenuItem key={index} value={rythm}>\r\n                        {rythm}\r\n                      </MenuItem>\r\n                    );\r\n                  else return null;\r\n                })}\r\n              </Select>\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1, max: 10 } }}\r\n                disabled={disabled}\r\n                name=\"numberOfNotes\"\r\n                label={isPL ? \"Liczba nut w akordzie\" : \"No. of notes in a chord\"}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.numberOfNotes}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{\r\n                  inputProps: { min: state.numberOfNotes, max: 12 },\r\n                }}\r\n                name=\"jazziness\"\r\n                label=\"Złożoność akordów\"\r\n                label={isPL ? \"Złożoność akordów\" : \"Chord complexity\"}\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.jazziness}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <Button\r\n                className=\"m-1\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={restart}\r\n              >\r\n                {isPL ? \"Zacznij od nowa\" : \"RESTART\"}\r\n                 <ReplayIcon />\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Col>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <NewGeneration\r\n                isPL = {isPL}\r\n                updateGeneration={updateGeneration}\r\n                params={{\r\n                  ...state,\r\n                  windowmin: rythms.indexOf(state.windowmin),\r\n                  windowmax: rythms.indexOf(state.windowmax),\r\n                }}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/DisplayNotes.jsx",[],["97","98"],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/wdyr.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/NewGeneration.jsx",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/components/Test.jsx",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/genome.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/progression.js",["99","100","101"],"import { Genome } from \"./genome\";\r\nimport { constructRythm, rythms, mapRythm } from \"./rythm\";\r\nimport { Note } from \"./note\";\r\nimport { RandomChord } from \"./chords\";\r\nimport { synth, getPlaying, setPlaying, getTempo } from \"./synth\";\r\nimport { constructVoicing } from \"./population\";\r\nimport * as Tone from \"tone\";\r\nimport midiWriter from \"midi-writer-js\";\r\nimport FileSaver from \"file-saver\";\r\n\r\nexport function createRandomProgression(\r\n  jazziness,\r\n  numberOfNotes,\r\n  noteLengths = 0,\r\n  progressionLength\r\n) {\r\n  let octave = 0;\r\n  let notes = [];\r\n  let lengths = constructRythm(progressionLength, noteLengths);\r\n  const scale = Math.floor(Math.random() * 12);\r\n  for (let i = 0; i < lengths.length; i++) {\r\n    const chord = RandomChord(octave, \"major\", numberOfNotes - 1, jazziness);\r\n    notes.push({\r\n      chord: chord.chord.map(\r\n        (x) => new Note(x + scale, lengths[i].beginning, lengths[i].rythm)\r\n      ),\r\n      root: new Note(\r\n        chord.root + scale,\r\n        lengths[i].beginning,\r\n        lengths[i].rythm\r\n      ),\r\n    });\r\n  }\r\n\r\n  const genome = new Genome(notes, lengths, scale);\r\n  return new Progression({\r\n    notes: notes,\r\n    rythm: lengths.map((x) => x.rythm),\r\n    genome: genome,\r\n  });\r\n}\r\n\r\nexport class Progression {\r\n  constructor({ rythm, genome, score = 1, notes, amIPlaying = false }) {\r\n    this.notes = notes;\r\n    this.rythm = rythm;\r\n    this.genome = genome;\r\n    this.score = score;\r\n\r\n    this.amIPlaying = amIPlaying;\r\n  }\r\n\r\n  getAllNotes() {\r\n    return this.notes.map((chord) => [...chord.chord, chord.root]).flat();\r\n  }\r\n\r\n  async play(callback) {\r\n    await Tone.start();\r\n    synth.sync();\r\n    if (Tone.Transport.state === \"stopped\") {\r\n      setPlaying(1);\r\n      let end = 0;\r\n      const notes = this.getAllNotes();\r\n      for (let i = 0; i < notes.length; i++) {\r\n        synth.triggerAttack(\r\n          notes[i].note,\r\n          (notes[i].start * 2 * 120) / getTempo()\r\n        );\r\n        synth.triggerRelease(\r\n          [notes[i].note],\r\n          (notes[i].end * 2 * 120) / getTempo()\r\n        );\r\n        if (notes[i].end > end) end = notes[i].end;\r\n      }\r\n      Tone.Transport.start();\r\n      callback();\r\n      clearTimeout(getPlaying().timeout);\r\n      setPlaying({\r\n        timeout: setTimeout(function () {\r\n          callback();\r\n          synth.releaseAll();\r\n          Tone.Transport.stop();\r\n          Tone.Transport.cancel();\r\n        }, (end * 2 * 1000 * 120) / getTempo()),\r\n        whichOne: () => callback(),\r\n      });\r\n    } else {\r\n      clearTimeout(getPlaying().timeout);\r\n      Tone.Transport.stop();\r\n      Tone.Transport.cancel();\r\n      synth.releaseAll();\r\n      if (!this.amIPlaying) {\r\n        if (getPlaying().whichOne) getPlaying().whichOne();\r\n        this.play(callback);\r\n      } else {\r\n        if (getPlaying().whichOne) getPlaying().whichOne();\r\n      }\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    clearTimeout(getPlaying().timeout);\r\n    Tone.Transport.stop();\r\n    Tone.Transport.cancel();\r\n    synth.releaseAll();\r\n  }\r\n\r\n  compare(progression) {\r\n    const notes = progression.getAllNotes().map((note) => JSON.stringify(note));\r\n    const thisNotes = this.getAllNotes().map((note) => JSON.stringify(note));\r\n    let counter = 0;\r\n    for (let i = 0; i < notes.length; i++) {\r\n      if (thisNotes.includes(notes[i])) counter++;\r\n    }\r\n    if (counter === notes.length) return true;\r\n    return false;\r\n  }\r\n\r\n  download() {\r\n    var track = new midiWriter.Track();\r\n\r\n    for (let i = 0; i < this.notes.length; i++) {\r\n      track.addEvent(\r\n        [\r\n          new midiWriter.NoteEvent({\r\n            pitch: [\r\n              ...this.notes[i].chord.map((x) => x.note),\r\n              this.notes[i].root.note,\r\n            ],\r\n            duration: mapRythm(this.rythm[i]),\r\n          }),\r\n        ],\r\n        function (event, index) {\r\n          return { sequential: false };\r\n        }\r\n      );\r\n    }\r\n\r\n    var write = new midiWriter.Writer(track);\r\n    let blob;\r\n    blob = new Blob([write.buildFile()], {\r\n      type: \"audio/midi\",\r\n    });\r\n    FileSaver.saveAs(blob, \"midi\");\r\n  }\r\n\r\n  transpose(scale) {\r\n    const diff = scale - this.genome.scale;\r\n    const notes = this.notes.map((chord) => {\r\n      return {\r\n        chord: chord.chord.map(\r\n          (x) => new Note(x.hight + diff, x.start, x.duration)\r\n        ),\r\n        root: new Note(\r\n          chord.root.hight + diff,\r\n          chord.root.start,\r\n          chord.root.duration\r\n        ),\r\n      };\r\n    });\r\n    const genome = new Genome(notes, this.rythm, this.genome.scale + diff);\r\n    return new Progression({ ...this, genome, notes });\r\n  }\r\n\r\n  mutate(jazziness, noteLengths, mutationChance) {\r\n    let newProgression = this.mutateScale();\r\n    newProgression = this.mutateRythm(mutationChance, jazziness, noteLengths);\r\n    newProgression = this.mutateMelody(mutationChance, jazziness);\r\n    return newProgression;\r\n  }\r\n\r\n  mutateMelody(p, jazziness) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      if (Math.random() < p && i < this.rythm.length - 1) {\r\n        const tmp = RandomChord(\r\n          0,\r\n          \"major\",\r\n          this.notes[0].chord.length,\r\n          jazziness\r\n        );\r\n        const root = new Note(\r\n          tmp.root + this.genome.scale,\r\n          beginning,\r\n          this.rythm[i]\r\n        );\r\n        const chord = tmp.chord.map((x) => x + this.genome.scale);\r\n        notes.push({\r\n          chord: chord.map((note) => new Note(note, beginning, this.rythm[i])), // eslint-disable-line\r\n          root: new Note(root.hight, beginning, this.rythm[i]),\r\n        });\r\n        newRythm.push(this.rythm[i]);\r\n        beginning += this.rythm[i];\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    const genome = new Genome(notes, newRythm, this.genome.scale);\r\n    return new Progression({ ...this, genome, notes, rythm: newRythm });\r\n  }\r\n\r\n  mutateScale() {\r\n    const newScale = Math.floor(Math.random() * 3) - 1 + this.genome.scale;\r\n    return this.transpose(newScale);\r\n  }\r\n\r\n  mutateRythm(p, jazziness, window) {\r\n    let temp;\r\n    const [tempNewRythm, tempNotes] = this.joinChord(p, jazziness);\r\n    temp = new Progression({ ...this, notes: tempNotes, rythm: tempNewRythm });\r\n    const [newRythm, notes] = temp.breakChord(p, jazziness, window);\r\n    const genome = new Genome(notes, newRythm, this.genome.scale);\r\n    return new Progression({ ...this, genome, notes, rythm: newRythm });\r\n  }\r\n\r\n  breakChord(p, jazziness, window) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    const max = window.max;\r\n    const min = window.min;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      let avaibleRythms = [];\r\n      rythms.forEach((x, index) => {\r\n        if (x < this.rythm[i] && index < max && index >= min)\r\n          avaibleRythms.push(x);\r\n      });\r\n      if (Math.random() < p && avaibleRythms.length > 0) {\r\n        const choice =\r\n          avaibleRythms[Math.floor(Math.random() * avaibleRythms.length)];\r\n\r\n        const tmp = RandomChord(\r\n          0,\r\n          \"major\",\r\n          this.notes[0].chord.length,\r\n          jazziness\r\n        );\r\n        const root = new Note(\r\n          tmp.root + this.genome.scale,\r\n          beginning,\r\n          this.rythm[i]\r\n        );\r\n        const chord = tmp.chord.map((x) => x + this.genome.scale);\r\n\r\n        if (Math.round(Math.random()) <= 2) {\r\n          notes.push({\r\n            chord: this.notes[i].chord.map(\r\n              (note) => new Note(note.hight, beginning, choice) // eslint-disable-line\r\n            ),\r\n            root: new Note(this.notes[i].root.hight, beginning, choice),\r\n          });\r\n          notes.push({\r\n            chord: chord.map(\r\n              (\r\n                note // eslint-disable-line\r\n              ) => new Note(note, beginning + choice, this.rythm[i] - choice)\r\n            ),\r\n            root: new Note(\r\n              root.hight,\r\n              beginning + choice,\r\n              this.rythm[i] - choice\r\n            ),\r\n          });\r\n          newRythm.push(this.rythm[i] - choice);\r\n          newRythm.push(choice);\r\n        } else {\r\n          notes.push({\r\n            chord: chord.map((note) => new Note(note, beginning, choice)), // eslint-disable-line\r\n            root: new Note(root.hight, beginning, choice),\r\n          });\r\n          notes.push({\r\n            chord: this.notes[i].chord.map(\r\n              (\r\n                note // eslint-disable-line\r\n              ) =>\r\n                new Note(note.hight, beginning + choice, this.rythm[i] - choice)\r\n            ),\r\n            root: new Note(\r\n              this.notes[i].root.hight,\r\n              beginning + choice,\r\n              this.rythm[i] - choice\r\n            ),\r\n          });\r\n          newRythm.push(choice);\r\n          newRythm.push(this.rythm[i] - choice);\r\n        }\r\n\r\n        beginning += this.rythm[i];\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    return [newRythm, notes];\r\n  }\r\n\r\n  joinChord(p, jazziness) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      if (Math.random() < p && i < this.rythm.length - 1) {\r\n        const chordsToJoin = [\r\n          ...this.notes[i].chord,\r\n          ...this.notes[i + 1].chord,\r\n        ];\r\n        const root = this.notes[i + Math.round(Math.random())].root;\r\n        const chord = constructVoicing(\r\n          chordsToJoin,\r\n          root,\r\n          this.genome.scale,\r\n          jazziness,\r\n          this.notes[i].chord.length\r\n        );\r\n        notes.push({\r\n          chord: chord.map(\r\n            (\r\n              note // eslint-disable-line\r\n            ) => new Note(note, beginning, this.rythm[i] + this.rythm[i + 1])\r\n          ),\r\n          root: new Note(\r\n            root.hight,\r\n            beginning,\r\n            this.rythm[i] + this.rythm[i + 1]\r\n          ),\r\n        });\r\n        newRythm.push(this.rythm[i] + this.rythm[i + 1]);\r\n        beginning += this.rythm[i] + this.rythm[i + 1];\r\n        i++;\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    return [newRythm, notes];\r\n  }\r\n}\r\n","/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/synth.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/chords.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/rythm.js",[],"/mnt/c/Users/luker/Documents/Github/midi-generator/src/genetic/note.js",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":196,"column":17,"nodeType":"108","endLine":196,"endColumn":72},{"ruleId":"102","replacedBy":"109"},{"ruleId":"104","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":258,"column":15,"nodeType":"113","messageId":"114","endLine":260,"endColumn":78},{"ruleId":"111","severity":1,"message":"112","line":277,"column":15,"nodeType":"113","messageId":"114","endLine":280,"endColumn":81},{"ruleId":"111","severity":1,"message":"112","line":322,"column":13,"nodeType":"113","messageId":"114","endLine":324,"endColumn":78},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["115"],["116"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'beginning'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]