{"version":3,"sources":["components/DisplayNotes.jsx","actions/actionTypes.js","actions/populationActions.js","components/MidiDisplay.jsx","components/Grid.jsx","genetic/genome.js","genetic/rythm.js","genetic/note.js","genetic/chords.js","genetic/synth.js","genetic/progression.js","genetic/population.js","components/NewGeneration.jsx","components/ControlPanel.jsx","components/Test.jsx","components/App.js","reportWebVitals.js","reducers/populationReducer.js","reducers/index.js","store/store.js","index.js"],"names":["DisplayNotes","notes","useState","cols","setCols","useEffect","height","Math","max","map","chord","baseLine","min","length","j","rythm","rows","i","includes","push","style","toString","width","reverse","Row","className","React","memo","ADD_SPECIMAN","SET_SPECIMAN_SCORE","DELETE_POPULATION","addSpeciman","speciman","type","payload","deletePopulation","MidiDisplay","progression","index","dispatch","useDispatch","Container","color","onClick","play","fontSize","Col","sm","score","Slider","aria-labelledby","valueLabelDisplay","onChange","_","value","setSpecimanScore","Grid","population","useSelector","state","populationFormatted","setPopulationFormatted","arr","splice","Jumbotron","row","Genome","chords","scale","Set","flat","mean","reduce","a","b","this","switches","rythms","constructRythm","window","currentLength","rythmStructure","previousValue","diff","randomNumber","floor","random","beginning","notesMap","Note","hight","start","duration","end","octave","note","maj","scales","major","mode","minor","RandomChord","scaleType","numberOfNotes","jazziness","randomNote","rootNote","root","transposed","dispersion","overload","choice","randomVoicing","x","gain","Tone","toDestination","filter","frequency","rolloff","Q","connect","synth","oscillator","count","spread","envelope","attack","decay","sustain","release","createRandomProgression","noteLengths","roots","lengths","genome","Progression","notes2","now","triggerAttack","triggerRelease","createRoulette","scores","pickSpeciman","roulette","pick","acc","cross","prog1","prog2","newScale","prog1Transposed","transpose","prog2Transposed","newRythm","notes1","timeline","ends","sort","round","crossRythms","getRootNote","newMelody","originalScale","newTimeline","rootNotes1","chordNotes1","rootNotes2","chordNotes2","candidates","existsInWindow","transposedRoot","indexOf","slice","crossMelodies","forEach","rootNotes","chordNotes","NewGeneration","updateGeneration","Button","variant","newPopulation","pick1","pick2","crossed","newGeneration","ControlPanel","generation","setGeneration","populationSize","setState","handleChange","e","target","name","restart","size","createPopulation","TextField","label","Test","child","setChild","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","path","whyDidYouRender","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","populationReducer","action","item","combineReducers","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.08cf9c07.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport {Row} from 'reactstrap'\r\n\r\nexport function DisplayNotes({notes}){\r\n    const [cols, setCols] = useState([])\r\n    useEffect(() => {\r\n        const height = Math.max(...notes.notes.map(chord => Math.max(...chord)))\r\n        const baseLine = Math.min(...notes.notes.map(chord => Math.min(...chord)))\r\n        // const height = 60\r\n        // const baseLine = 24\r\n        let cols=[]\r\n        let length = 0\r\n        for(let j = 0; j<notes.rythm.length; j++ ){\r\n            length+=notes.rythm[j]\r\n        }\r\n        for(let j = 0; j<notes.notes.length; j++ ){\r\n            const chord = notes.notes[j]\r\n            let rows = []\r\n            for(let i = baseLine; i<=height; i++ ){\r\n            if(chord.includes(i))\r\n                rows.push(\r\n                <div key={j.toString()+i.toString()} style={{height: (1/(height-baseLine+1)*100).toString()+'%', width:'100%', \"backgroundColor\":'#c62828'}}>\r\n                </div>)\r\n            else\r\n                rows.push(\r\n                <div key={j.toString()+i.toString()} style={{height: (1/(height-baseLine+1)*100).toString()+'%', width:'100%'}}>\r\n                </div>)\r\n            }\r\n            cols.push(<div key={j} style={{height: '100%', width: (notes.rythm[j]/length*100).toString()+'%'}}>{rows.reverse()}</div>)\r\n        }\r\n        setCols(cols)\r\n      }, [notes]);\r\n  return (\r\n    <Row className='w-100 m-0 h-100'>\r\n     {cols}\r\n      </Row>\r\n      );\r\n}\r\n\r\nexport default React.memo(DisplayNotes);","export const ADD_SPECIMAN = \"ADD_SPECIMAN\";\r\nexport const SET_SPECIMAN_SCORE = \"SET_SPECIMAN_SCORE\";\r\nexport const DELETE_POPULATION = \"DELETE_POPULATION\";","import { ADD_SPECIMAN, SET_SPECIMAN_SCORE, DELETE_POPULATION } from \"./actionTypes.js\";\r\n\r\nexport const addSpeciman = (speciman) => ({ \r\n    type: ADD_SPECIMAN, \r\n    payload: { speciman } \r\n});\r\n\r\nexport const setSpecimanScore = ( {index, score} ) => ({ \r\n    type: SET_SPECIMAN_SCORE, \r\n    payload: { index, score } \r\n});\r\n\r\nexport const deletePopulation = ( ) => ({ \r\n    type: DELETE_POPULATION\r\n});","import React from 'react';\r\nimport {Container, Row, Col} from 'reactstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport Slider from '@material-ui/core/Slider';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\n\r\nimport DisplayNotes from './DisplayNotes'\r\nimport { setSpecimanScore} from '../actions/populationActions'\r\n\r\nfunction MidiDisplay({progression, index}){\r\n  const dispatch = useDispatch()\r\n\r\n  const setScore = (_, value) => {\r\n    dispatch(setSpecimanScore({index: index ,score: value}))\r\n  }\r\n\r\n  const play = () => {\r\n    progression.play()\r\n  }\r\n\r\n  return (\r\n  <Container className='p-0 h-100'>\r\n      <Row className='w-100 m-0 h-75'>\r\n          <DisplayNotes color='#c62828' notes={progression} />\r\n          <div className='vote' onClick={play}><PlayCircleOutlineIcon style={{ fontSize: 80 }} className='vote-text'/></div>\r\n      </Row>\r\n      <Row>\r\n        <Col sm={3}>\r\n          <small>\r\n            Score\r\n          </small>\r\n        </Col>\r\n        <Col sm={1} className='pl-2'>\r\n          <small>\r\n            {progression.score}\r\n          </small>\r\n        </Col>\r\n        <Col className='pl-2'>\r\n        <Slider\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          min={0}\r\n          max={100}\r\n          onChange={setScore}\r\n          value={progression.score}\r\n        />\r\n        </Col>\r\n      </Row>\r\n  </Container>)\r\n}\r\n\r\nexport default React.memo(MidiDisplay);\r\n","import React, {useState, useEffect} from 'react';\r\nimport MidiDisplay from './MidiDisplay';\r\nimport {Jumbotron, Container, Row, Col} from 'reactstrap'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction Grid() {\r\n    const numberPerRow = 4;\r\n    const population = useSelector(state => {\r\n        return state.population\r\n    })\r\n\r\n    const [populationFormatted, setPopulationFormatted] = useState([])\r\n    useEffect(() => {\r\n        let arr = [...population];\r\n        let populationFormatted = []\r\n        while(arr.length) populationFormatted.push(arr.splice(0,numberPerRow));\r\n        setPopulationFormatted(populationFormatted)\r\n      }, [population]);\r\n\r\n  return (\r\n    <Jumbotron>\r\n        <Container>\r\n            {populationFormatted.map((row,i) => {\r\n                return (\r\n                    <Row key={i}>\r\n                        {\r\n                            row.map((progression,j) => {\r\n                                return (\r\n                                <Col key={j} style={{height:\"200px\"}}>\r\n                                    <MidiDisplay progression={progression} index={i*numberPerRow+j}/>\r\n                                </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                )\r\n            })}\r\n        </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","export class Genome{\r\n    constructor(chords, rythm, scale){\r\n        const notes = [...new Set(chords.flat())]\r\n        let mean = notes.reduce((a, b) => a + b) / notes.length;\r\n        const length = rythm.reduce((a, b) => a + b);\r\n        \r\n        this.scale= scale\r\n        this.length= length\r\n        this.notes= notes\r\n        this.switches= rythm.length\r\n        this.mean= mean\r\n    }\r\n}","\r\nconst rythms = [1/8,1/4,1/2,3/4,1,3/2,2,3,4]\r\n// const lengths = [2,4,8]\r\n\r\nexport function constructRythm(length, window){\r\n    window=window-rythms.length+1\r\n    let currentLength = 0;\r\n    let rythmStructure = []\r\n    let previousValue= 0\r\n\r\n    const max = Math.min(rythms.length-1 + window,rythms.length-1)\r\n    const min = Math.max(window,0)\r\n    while(currentLength<length){\r\n        let diff = 0 ;\r\n        let randomNumber = Math.floor(Math.random() *  (max-min))+min \r\n        if(Math.random()<0.4 && previousValue!==0){\r\n            randomNumber = previousValue\r\n        } else {\r\n            previousValue = randomNumber\r\n        }\r\n\r\n        if(currentLength+rythms[randomNumber]-diff>length){\r\n            diff = length - currentLength\r\n            rythmStructure.push({rythm: diff,beginning: currentLength})\r\n            currentLength+=diff\r\n            return rythmStructure\r\n        }\r\n\r\n        rythmStructure.push({rythm: rythms[randomNumber]-diff,beginning: currentLength})\r\n        currentLength+=rythms[randomNumber]-diff\r\n    }\r\n\r\n    return rythmStructure\r\n}","const notesMap = [\r\n    'C',\r\n    'C#',\r\n    'D',\r\n    'D#',\r\n    'E',\r\n    'F',\r\n    'F#',\r\n    'G',\r\n    'G#',\r\n    'A',\r\n    'A#',\r\n    'B'\r\n  ]\r\n\r\nexport class Note{\r\n    constructor(hight, start, duration) {\r\n        this.hight = hight\r\n        this.start = start\r\n        this.end = start+duration\r\n        this.duration = duration\r\n\r\n        const octave = Math.floor(hight/12);\r\n        const note = notesMap[hight%12];\r\n        this.note = note+octave.toString();\r\n    }\r\n\r\n    existsInWindow(window){\r\n        if((window[0]>this.start && window[0]<this.end)||(window[1]>this.start && window[1]<=this.end)){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}","const maj = 'major'\r\nconst min = 'minor'\r\n\r\n\r\nexport const scales = {\r\n    major: {\r\n        notes: [0,2,4,5,7,9,11],\r\n        mode: [maj,min, min, maj, maj, min, min]\r\n    }\r\n}\r\n\r\nexport const chords = {\r\n    major:[0,4,7,2,11,6,9,1,8,3,10,5],\r\n    minor:[0,3,7,2,10,5,9,4,11,6,8,1]\r\n}\r\n\r\nexport function RandomChord(octave,scaleType,numberOfNotes, jazziness){\r\n    const scale = scales[scaleType]\r\n    const randomNote = Math.floor(Math.random() * scale.notes.length);\r\n\r\n    const mode = scale.mode[randomNote]\r\n    let rootNote = scale.notes[randomNote]\r\n\r\n    if(numberOfNotes===0){\r\n        rootNote+=12*3\r\n        return {root: rootNote, chord: []}\r\n    }\r\n    let chord = randomVoicing(rootNote,mode, numberOfNotes,scale.notes,jazziness,octave)\r\n\r\n    let transposed = chord.map(x => x + 12*(3+octave))\r\n    if(Math.random()-(1/4)>rootNote/12)\r\n        rootNote+=12\r\n\r\n    return {chord: transposed, root: rootNote+12}\r\n}\r\n\r\nfunction randomVoicing(root,mode,numberOfNotes, scale, jazziness=5, octave, dispersion = 0){\r\n    let chord = []\r\n    let overload=0\r\n    for(let i = 0; i<numberOfNotes; i++){\r\n        const choice = Math.floor(Math.random() * jazziness + Math.floor(overload/(jazziness*2)))\r\n        let note = chords[mode][choice];\r\n        note += root\r\n        if(Math.random()<(((choice/(1+octave))/12) - dispersion)){\r\n            note+=12\r\n        }\r\n        if(Math.random()<(((note/2*(1+octave))/12) - dispersion) && choice!==0){\r\n            note-=12\r\n        }\r\n\r\n        if (chord.includes(note) || !scale.includes(note%12))\r\n        {\r\n            overload++\r\n            i--\r\n            continue\r\n        }\r\n        overload=0\r\n        chord.push(note)\r\n    }\r\n    return chord\r\n}","import * as Tone from 'tone'\r\n\r\nconst gain = new Tone.Gain(0.2).toDestination();\r\nconst filter = new Tone.Filter({frequency: 1000, type: \"lowpass\", rolloff: -12, Q: 0}).connect(gain);\r\n\r\nexport const synth = new Tone.PolySynth(Tone.Synth,{\r\n  oscillator : {\r\n    count: 2,\r\n    spread: 5,\r\n    type : \"sawtooth\",\r\n  },\r\n  // envelope: {\r\n  //   attack: 0.01,\r\n  //   decay: 15,\r\n  //   sustain: 0.20,\r\n  //   release: 0.1,\r\n  // },\r\n    envelope: {\r\n    attack: 0.002,\r\n    decay: 0,\r\n    sustain: 1,\r\n    release: 0.1,\r\n  },\r\n}).connect(filter);\r\n","import { Genome } from './genome'\r\nimport {constructRythm} from './rythm'\r\nimport { Note } from './note'\r\nimport { RandomChord } from './chords'\r\nimport { synth } from './synth'\r\nimport * as Tone from 'tone'\r\n\r\nexport function createRandomProgression(jazziness, numberOfNotes, noteLengths=0){\r\n    let octave = 0\r\n    let chords = []\r\n    let roots = []\r\n    let notes = []\r\n    let lengths = constructRythm(8, noteLengths)\r\n    const scale = Math.floor(Math.random() * 12)\r\n    for(let i = 0; i<lengths.length; i++){\r\n        const chord = RandomChord(octave,'major',numberOfNotes-1,jazziness)\r\n        roots.push(chord.root+scale)\r\n        chords.push(chord.chord.map(x=>x+scale))\r\n        chord.chord.map(x => notes.push(new Note(x+scale,lengths[i].beginning, lengths[i].rythm)))\r\n        notes.push(new Note(chord.root+scale,lengths[i].beginning, lengths[i].rythm))\r\n    }\r\n        \r\n    chords = chords.map((_, index) => [...chords[index],roots[index]])\r\n    const genome = new Genome(chords, lengths, scale)\r\n    return new Progression({notes: chords, rythm: lengths.map(x=>x.rythm), genome: genome, notes2:notes })\r\n}\r\n\r\nexport class Progression{\r\n    constructor({notes, rythm, genome, notes2, score= 10, roots, chords}){\r\n        this.roots = roots\r\n        this.chords = chords\r\n        this.notes = notes\r\n        this.rythm = rythm\r\n        this.genome = genome\r\n        this.notes2 = notes2\r\n        this.score = score\r\n    }\r\n\r\n    play(){\r\n        const now = Tone.now()\r\n        for(let i = 0; i<this.notes2.length; i++){\r\n          synth.triggerAttack(this.notes2[i].note, now+this.notes2[i].start);\r\n          synth.triggerRelease([this.notes2[i].note],now+this.notes2[i].end);\r\n        }\r\n      }\r\n\r\n    transpose(scale){\r\n        const diff = scale - this.genome.scale\r\n        const genome = new Genome(this.notes, this.rythm, this.genome.scale + diff)\r\n        const notes = this.notes.map(notes => notes.map(note => note + diff))\r\n\r\n        // const roots = this.roots.map(note => new Note(note.hight + diff, note.start, note.duration))\r\n        // const chords = this.chords.map(notes => notes.map(note => new Note(note.hight + diff, note.start, note.duration)))\r\n        const notes2 = this.notes2.map(note => new Note(note.hight + diff, note.start, note.duration))\r\n        return new Progression({...this,genome, notes, notes2 })\r\n    }\r\n}\r\n","import {createRandomProgression, Progression} from './progression'\r\nimport { Genome } from './genome'\r\nimport { Note } from './note'\r\nimport {scales, chords} from './chords'\r\n\r\nexport function createPopulation(size,jazziness, numberOfNotes, noteLengths) {\r\n    const population = []\r\n\r\n    for(let i =0; i<size; i++){\r\n        population.push(createRandomProgression(jazziness, numberOfNotes, noteLengths))\r\n    }\r\n    return population\r\n}\r\n\r\nexport function newGeneration(population){\r\n    let newPopulation = []\r\n    for(let i = 0; i<population.length; i++){\r\n        const roulette = createRoulette(population.map(x => x.score))\r\n\r\n        const pick1 = pickSpeciman(roulette)\r\n        const pick2 = pickSpeciman(roulette)\r\n\r\n        const spec1 = population[pick1]\r\n        const spec2 = population[pick2]\r\n    \r\n        const crossed = cross(spec1,spec2)\r\n        newPopulation.push(crossed)\r\n    }\r\n    return newPopulation\r\n}\r\n\r\nfunction createRoulette(scores){\r\n    const max = scores.reduce((a, b) => a + b);\r\n    const probabilities = scores.map(score => score/max)\r\n    return probabilities\r\n}\r\n\r\nfunction pickSpeciman(roulette){\r\n    const pick = Math.random();\r\n    let acc = 0\r\n    let i = 0\r\n    while(acc<pick){\r\n        acc += roulette[i]\r\n        i++\r\n    }\r\n    return i-1\r\n}\r\n\r\nexport function cross(prog1, prog2){\r\n    const max = Math.max(prog1.genome.scale, prog2.genome.scale)\r\n    const min = Math.min(prog1.genome.scale, prog2.genome.scale)\r\n\r\n    const newScale = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n    const prog1Transposed = prog1.transpose(newScale)\r\n    const prog2Transposed = prog2.transpose(newScale)\r\n\r\n    const length = 8\r\n    const newRythm = crossRythms(prog1Transposed.notes2, prog2Transposed.notes2, length)\r\n\r\n\r\n    getRootNote(prog1Transposed, prog2Transposed)\r\n    const newMelody = crossMelodies(prog1Transposed, prog2Transposed, newRythm, newScale, prog1.notes[0].length-1,3)\r\n\r\n    let notes = [] \r\n    let beginning = 0\r\n    for(let i = 0; i<newRythm.length; i++){\r\n        newMelody[i].forEach(note => { // eslint-disable-line\r\n            notes.push(new Note(note, beginning, newRythm[i]))\r\n        });\r\n        beginning+=newRythm[i]\r\n    }\r\n    const genome = new Genome(newMelody, newRythm, newScale)\r\n    const progression  = new Progression({notes: newMelody, rythm: newRythm, genome: genome,  notes2: notes})\r\n    return progression\r\n}\r\n\r\nfunction getRootNote(prog1){\r\n    const roots = prog1.notes.map(notes => notes[notes.length-1])\r\n    const chords = prog1.notes.map(notes => notes.slice(0,notes.length-1)).flat()\r\n    let rootNotes = []\r\n    let chordNotes = []\r\n    for(let i = 0; i < prog1.notes2.length; i++){\r\n        if(roots.includes(prog1.notes2[i].hight)){\r\n            rootNotes.push(prog1.notes2[i])\r\n        }\r\n        if(chords.includes(prog1.notes2[i].hight)){\r\n            chordNotes.push(prog1.notes2[i])\r\n        }\r\n    }\r\n    return [rootNotes,chordNotes]\r\n}\r\n\r\nfunction crossMelodies(notes1, notes2, newRythm, originalScale, numberOfNotes, jazziness){\r\n    let newTimeline = 0\r\n    let roots = []\r\n    const [rootNotes1, chordNotes1] = getRootNote(notes1)\r\n    const [rootNotes2, chordNotes2] = getRootNote(notes2)\r\n    for(let i=0; i<newRythm.length; i++){\r\n        const window=[newTimeline, newTimeline+newRythm[i]]\r\n\r\n        let candidates = []\r\n        rootNotes1.map(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note.hight)\r\n            return null\r\n        })\r\n\r\n        rootNotes2.map(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note.hight)\r\n            return null\r\n        })\r\n\r\n        candidates =  [...new Set(candidates.flat())]\r\n\r\n        const choice = Math.floor(Math.random()*candidates.length)\r\n        const root = candidates[choice]\r\n\r\n        candidates = []\r\n        chordNotes1.map(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note.hight)\r\n            return null\r\n        })\r\n\r\n        chordNotes2.map(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note.hight)\r\n            return null\r\n        })\r\n\r\n        candidates =  [...new Set(candidates.flat())]\r\n\r\n        const scale = scales['major']\r\n        const transposedRoot = (root-originalScale)%12\r\n        const mode = scale.mode[scale.notes.indexOf(transposedRoot)]\r\n\r\n        let chord = []\r\n        let overload=0\r\n        for(let j = 0 ; j<numberOfNotes; j++ ){\r\n            //const choice = Math.floor(Math.random() * jazziness + Math.floor(overload/(jazziness*2)))\r\n            const choice = candidates[Math.floor(Math.random()*candidates.length)]\r\n            if (chord.includes(choice) || !chords[mode].slice(0,jazziness + Math.floor(overload/(jazziness*2))).includes(((choice-root)%12)))\r\n            {\r\n                overload++\r\n                j--\r\n                continue\r\n            }\r\n            overload=0\r\n            chord.push(choice)\r\n        }\r\n        chord.push(root)\r\n        newTimeline += newRythm[i]\r\n        roots.push(chord)\r\n    }\r\n    return roots\r\n}\r\n\r\nfunction crossRythms(notes1, notes2, length){\r\n    let newRythm = []\r\n    let timeline = 0\r\n    let ends = [notes1.map(note => note.end).sort(),notes2.map(note => note.end).sort()]\r\n\r\n    while(timeline<length){\r\n        let choice = Math.round(Math.random())\r\n        for(let i = 0; i< ends[choice].length; i++){\r\n            if(ends[choice][i]>timeline){\r\n                newRythm.push(ends[choice][i]-timeline)\r\n                timeline = ends[choice][i]\r\n                break;\r\n            }\r\n            if(i===ends[choice].length-1){\r\n                newRythm.push(ends[choice][i]-timeline)\r\n                timeline = ends[choice][i]\r\n            }\r\n        }\r\n    }\r\n    return newRythm\r\n}\r\n","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { newGeneration} from '../genetic/population'\r\nimport {addSpeciman, deletePopulation} from '../actions/populationActions'\r\n\r\nfunction NewGeneration({updateGeneration}){\r\n  const dispatch = useDispatch()\r\n  \r\n    const population = useSelector(state => {\r\n        return state.population\r\n    })\r\n\r\n    const nextGen = () => {\r\n        dispatch(deletePopulation())\r\n        newGeneration(population).map(x => dispatch(addSpeciman(x)))\r\n        updateGeneration()\r\n    }\r\n\r\n  return (\r\n    <Button variant=\"contained\" color=\"primary\" onClick={nextGen}>\r\n        Evolve\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default NewGeneration;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Jumbotron, Container, Row, Col} from 'reactstrap'\r\nimport { useDispatch } from 'react-redux'\r\nimport {Button, TextField} from '@material-ui/core';\r\n\r\nimport {createPopulation} from '../genetic/population'\r\nimport {addSpeciman, deletePopulation} from '../actions/populationActions'\r\nimport NewGeneration from './NewGeneration'\r\n\r\nfunction ControlPanel() {\r\n    const [generation, setGeneration] = useState(0)\r\n\r\n    const [state, setState] = useState({\r\n        populationSize: 8,\r\n        jazziness: 4,\r\n        numberOfNotes: 3,\r\n        noteLengths: 12,\r\n    })\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChange = (e) => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    const updateGeneration = () => {\r\n        setGeneration(generation+1)\r\n    }\r\n\r\n    const restart = () => {\r\n        setGeneration(0)\r\n        dispatch(deletePopulation())\r\n        createPopulation(state.populationSize, state.jazziness, state.numberOfNotes, state.noteLengths).map(x => dispatch(addSpeciman(x)))\r\n    }\r\n\r\n    useEffect(() => {\r\n        restart()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n      }, [state]);\r\n\r\n\r\n  return (\r\n    <Jumbotron>\r\n        <Container>\r\n            <Row>\r\n                <h2>Generation: {generation}</h2>\r\n            </Row>\r\n            <Row className='p-5'>\r\n                <Col><TextField name='populationSize' label=\"Population size\" type=\"number\" onChange={handleChange} value={state.populationSize}/></Col>\r\n                <Col><TextField name='jazziness' label=\"Jazziness\" type=\"number\" onChange={handleChange} value={state.jazziness}/></Col>\r\n                <Col><TextField name='numberOfNotes' label=\"Number of notes\" type=\"number\" onChange={handleChange} value={state.numberOfNotes}/></Col> \r\n                <Col><TextField name='noteLengths' label=\"Note lengths\" type=\"number\" onChange={handleChange} value={state.noteLengths}/></Col>\r\n            </Row>\r\n            <Row>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={restart}>\r\n                    Restart\r\n                </Button>\r\n                <NewGeneration updateGeneration={updateGeneration}/>\r\n            </Row>\r\n        </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React, {useEffect, useState} from 'react';\r\nimport MidiDisplay from './MidiDisplay';\r\nimport {Jumbotron, Container, Row, Col} from 'reactstrap'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { cross } from '../genetic/population'\r\n\r\nfunction Test() {\r\n\r\n    const [child, setChild] = useState(null)\r\n    const population = useSelector(state => {\r\n        return state.population\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(population.length>1){\r\n            setChild(cross(population[0], population[1]))\r\n        }\r\n      }, [population]);\r\n    // population[0].notes = population[0].notes.map(x=>x.map(x=>50))\r\n    // population[0].notes2 = population[0].notes2.map(x=> x= new Note(50, x.start, x.duration))\r\n\r\nif (!child){\r\n    return null\r\n}\r\n  return (\r\n    <Jumbotron>\r\n        <Container>\r\n            <Row className='p-3'>\r\n                <Col><h2>Debug</h2></Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Parent 1:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={population[0]} index={0}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Parent 2:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={population[1]} index={1}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Child:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={child}/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n","import Grid from './Grid'\nimport ControlPanel from './ControlPanel'\nimport Test from './Test'\nimport '../style/App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#c62828',\n    },\n    secondary: {\n      main: '#181a1b'\n    },\n  },\n}\n);\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ControlPanel/>\n      <Router>\n        <Switch>\n          <Route path=\"/test\">\n            <Test />\n          </Route>\n          <Route path=\"/\">\n            <Grid />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nApp.whyDidYouRender = true\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_SPECIMAN, SET_SPECIMAN_SCORE, DELETE_POPULATION } from \"../actions/actionTypes\";\r\nimport {Progression} from '../genetic/progression'\r\n\r\nconst initialState = [] ;\r\n\r\nconst populationReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_SPECIMAN: {\r\n        return [\r\n          ...state,\r\n          action.payload.speciman\r\n        ];\r\n      }\r\n\r\n      case DELETE_POPULATION: {\r\n        return [];\r\n      }\r\n\r\n      case SET_SPECIMAN_SCORE:{\r\n        return state.map((item, index) => {\r\n          if (index !== action.payload.index) {\r\n            return item\r\n          }\r\n          return new Progression({\r\n            ...item,\r\n            score: action.payload.score\r\n          })\r\n        })\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default populationReducer;\r\n","import { combineReducers } from 'redux';\r\nimport populationReducer from \"./populationReducer\";\r\n\r\nexport default combineReducers({ population: populationReducer });\r\n","import { createStore } from 'redux';\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { Provider } from 'react-redux'\nimport store from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}