{"version":3,"sources":["components/DisplayNotes.jsx","actions/actionTypes.js","actions/populationActions.js","components/MidiDisplay.jsx","components/Grid.jsx","genetic/genome.js","genetic/rythm.js","genetic/note.js","genetic/chords.js","genetic/synth.js","genetic/progression.js","genetic/population.js","components/NewGeneration.jsx","components/ControlPanel.jsx","components/Test.jsx","components/App.js","reportWebVitals.js","reducers/populationReducer.js","reducers/index.js","store/store.js","index.js"],"names":["DisplayNotes","progression","max","min","useState","cols","setCols","useEffect","height","baseLine","length","j","rythm","notes","chord","root","map","note","hight","rows","i","includes","push","style","toString","width","backgroundColor","reverse","Row","className","React","memo","ADD_SPECIMAN","SET_SPECIMAN_SCORE","DELETE_POPULATION","SET_SPECIMAN_PLAYING","addSpeciman","speciman","type","payload","setSpecimanScore","index","score","deletePopulation","MidiDisplay","dispatch","useDispatch","stop","play","setSpecimanPlaying","scoreMeter","tempScore","Container","color","amIPlaying","onClick","fontSize","download","Grid","population","useSelector","state","populationFormatted","setPopulationFormatted","arr","splice","Math","Jumbotron","row","Col","Genome","chords","scale","chordNotes","flat","reduce","a","b","this","switches","rythms","mapRythm","input","output","sum","rythmMap","currentValue","parseInt","constructRythm","window","currentLength","rythmStructure","previousValue","diff","randomNumber","floor","random","beginning","notesMap","Note","start","duration","end","octave","maj","scales","major","mode","minor","RandomChord","scaleType","numberOfNotes","jazziness","randomNote","rootNote","transposed","dispersion","overload","choice","randomVoicing","x","gain","Tone","toDestination","filter","frequency","rolloff","Q","connect","isPlaying","tempo","getPlaying","setPlaying","getTempo","synth","oscillator","count","spread","envelope","attack","decay","sustain","release","createRandomProgression","noteLengths","progressionLength","lengths","genome","Progression","callback","sync","getAllNotes","triggerAttack","triggerRelease","clearTimeout","timeout","setTimeout","releaseAll","cancel","whichOne","JSON","stringify","thisNotes","counter","track","midiWriter","Track","addEvent","NoteEvent","pitch","event","sequential","blob","write","Writer","Blob","buildFile","FileSaver","saveAs","mutationChance","mutateScale","mutateRythm","mutateMelody","p","newRythm","tmp","newScale","transpose","joinChord","tempNewRythm","tempNotes","breakChord","avaibleRythms","forEach","round","chordsToJoin","constructVoicing","createRoulette","scores","pickSpeciman","roulette","pick","acc","cross","prog1","prog2","prog1Transposed","prog2Transposed","notes1","notes2","timeline","ends","sort","crossRythms","newNotes","buildNotes","originalScale","newTimeline","newChords","candidates","existsInWindow","Set","crossMelodies","transposedRoot","indexOf","slice","NewGeneration","updateGeneration","params","Button","variant","populationSize","newPopulation","pick1","pick2","mutated","mutate","decision","compare","newGeneration","windowmin","windowmax","ControlPanel","generation","setGeneration","setState","settempo","disabled","handleChange","e","value","parseFloat","target","name","restart","size","createPopulation","Card","TextField","InputProps","inputProps","label","onChange","step","InputLabel","shrink","Select","MenuItem","Test","child","setChild","theme","createMuiTheme","palette","primary","main","secondary","App","ThemeProvider","path","whyDidYouRender","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","populationReducer","action","item","combineReducers","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.74c52797.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Row } from \"reactstrap\";\r\n\r\nexport function DisplayNotes({ progression, max, min }) {\r\n  const [cols, setCols] = useState([]);\r\n  useEffect(() => {\r\n    const height = max;\r\n    const baseLine = min;\r\n    let cols = [];\r\n    let length = 0;\r\n    for (let j = 0; j < progression.rythm.length; j++) {\r\n      length += progression.rythm[j];\r\n    }\r\n    for (let j = 0; j < progression.notes.length; j++) {\r\n      const chord = [\r\n        ...progression.notes[j].chord,\r\n        progression.notes[j].root,\r\n      ].map((note) => note.hight);\r\n      let rows = [];\r\n      for (let i = baseLine; i <= height; i++) {\r\n        if (chord.includes(i))\r\n          rows.push(\r\n            <div\r\n              key={j.toString() + i.toString()}\r\n              style={{\r\n                height: ((1 / (height - baseLine + 1)) * 100).toString() + \"%\",\r\n                width: \"100%\",\r\n                backgroundColor: \"#c62828\",\r\n              }}\r\n            ></div>\r\n          );\r\n        else\r\n          rows.push(\r\n            <div\r\n              key={j.toString() + i.toString()}\r\n              style={{\r\n                height: ((1 / (height - baseLine + 1)) * 100).toString() + \"%\",\r\n                width: \"100%\",\r\n              }}\r\n            ></div>\r\n          );\r\n      }\r\n      cols.push(\r\n        <div\r\n          key={j}\r\n          style={{\r\n            height: \"100%\",\r\n            width: ((progression.rythm[j] / length) * 100).toString() + \"%\",\r\n          }}\r\n        >\r\n          {rows.reverse()}\r\n        </div>\r\n      );\r\n    }\r\n    setCols(cols);\r\n  }, [progression, max, min]);\r\n  return <Row className=\"w-100 m-0 h-100\">{cols}</Row>;\r\n}\r\n\r\nexport default React.memo(DisplayNotes);\r\n","export const ADD_SPECIMAN = \"ADD_SPECIMAN\";\r\nexport const SET_SPECIMAN_SCORE = \"SET_SPECIMAN_SCORE\";\r\nexport const DELETE_POPULATION = \"DELETE_POPULATION\";\r\nexport const SET_SPECIMAN_PLAYING = \"SET_SPECIMAN_PLAYING\";","import { ADD_SPECIMAN, SET_SPECIMAN_SCORE, DELETE_POPULATION, SET_SPECIMAN_PLAYING } from \"./actionTypes.js\";\r\n\r\nexport const addSpeciman = (speciman) => ({ \r\n    type: ADD_SPECIMAN, \r\n    payload: { speciman } \r\n});\r\n\r\nexport const setSpecimanScore = ( {index, score} ) => ({ \r\n    type: SET_SPECIMAN_SCORE, \r\n    payload: { index, score } \r\n});\r\n\r\nexport const setSpecimanPlaying = ( {index} ) => ({ \r\n    type: SET_SPECIMAN_PLAYING, \r\n    payload: { index } \r\n});\r\n\r\nexport const deletePopulation = ( ) => ({ \r\n    type: DELETE_POPULATION\r\n});","import React, {useEffect} from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\r\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\r\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport DisplayNotes from \"./DisplayNotes\";\r\nimport {\r\n  setSpecimanScore,\r\n  setSpecimanPlaying,\r\n} from \"../actions/populationActions\";\r\n\r\nfunction MidiDisplay({ progression, index, max, min }) {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      progression.stop();\r\n    }\r\n    // eslint-disable-next-line\r\n  }, [progression.notes]);\r\n\r\n  const scoreUp = () => {\r\n    if (progression.score < 10)\r\n      dispatch(\r\n        setSpecimanScore({ index: index, score: progression.score + 1 })\r\n      );\r\n  };\r\n\r\n  const scoreDown = () => {\r\n    if (progression.score > 0)\r\n      dispatch(\r\n        setSpecimanScore({ index: index, score: progression.score - 1 })\r\n      );\r\n  };\r\n\r\n  const play = () => {\r\n    const callback = () => {\r\n      dispatch(setSpecimanPlaying({ index: index }));\r\n    };\r\n    progression.play(callback);\r\n  };\r\n\r\n  const download = () => {\r\n    progression.download();\r\n  };\r\n\r\n  let scoreMeter = [];\r\n  let tempScore = progression.score;\r\n  for (let i = 0; i < 10; i++) {\r\n    if (tempScore > 0) {\r\n      scoreMeter.push(<div className=\"w-100 score-bar score-bar-color\"></div>);\r\n      tempScore--;\r\n    } else {\r\n      scoreMeter.push(<div className=\"w-100 score-bar\"></div>);\r\n    }\r\n  }\r\n  scoreMeter.reverse();\r\n\r\n  return (\r\n    <Container className=\"p-0 h-100\">\r\n      <Row className=\"w-100 m-0 h-100\">\r\n        <DisplayNotes\r\n          color=\"#c62828\"\r\n          progression={progression}\r\n          max={max}\r\n          min={min}\r\n        />\r\n        {!progression.amIPlaying && (\r\n          <div className=\"overlay play border-color\" onClick={play}>\r\n            <PlayCircleOutlineIcon\r\n              style={{ fontSize: 80 }}\r\n              className=\"overlay-text\"\r\n            />\r\n          </div>\r\n        )}\r\n        {progression.amIPlaying && (\r\n          <div className=\"overlay play border-color\" onClick={play}>\r\n            <PauseCircleOutlineIcon\r\n              style={{ fontSize: 80 }}\r\n              className=\"overlay-text\"\r\n            />\r\n          </div>\r\n        )}\r\n        <div className=\"overlay up-vote border-color\" onClick={scoreUp}>\r\n          <ArrowUpwardIcon style={{ fontSize: 60 }} className=\"overlay-text\" />\r\n        </div>\r\n        <div className=\"overlay down-vote border-color\" onClick={scoreDown}>\r\n          <ArrowDownwardIcon\r\n            style={{ fontSize: 60 }}\r\n            className=\"overlay-text\"\r\n          />\r\n        </div>\r\n        <div className=\"download border-color\" onClick={download}>\r\n          <SaveAltIcon style={{ fontSize: 20 }} className=\"overlay-text\" />\r\n        </div>\r\n        <div className=\"score\">{scoreMeter}</div>\r\n        <div className=\"score\">\r\n          <small className=\"score-text\">score: {progression.score}</small>\r\n        </div>\r\n      </Row>\r\n      {/* <Row>\r\n        <Col sm={3}>\r\n          <small>\r\n            Score\r\n          </small>\r\n        </Col>\r\n        <Col sm={1} className='pl-2'>\r\n          <small>\r\n            {progression.score}\r\n          </small>\r\n        </Col>\r\n        <Col className='pl-2'>\r\n        <Slider\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          min={0}\r\n          max={100}\r\n          onChange={setScore}\r\n          value={progression.score}\r\n        />\r\n        </Col>\r\n      </Row> */}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default React.memo(MidiDisplay);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport MidiDisplay from \"./MidiDisplay\";\r\nimport { Jumbotron, Container, Row, Col } from \"reactstrap\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction Grid() {\r\n  const numberPerRow = 4;\r\n  const population = useSelector((state) => {\r\n    return state.population;\r\n  });\r\n\r\n  const [populationFormatted, setPopulationFormatted] = useState([]);\r\n  useEffect(() => {\r\n    let arr = [...population];\r\n    let populationFormatted = [];\r\n    while (arr.length) populationFormatted.push(arr.splice(0, numberPerRow));\r\n    setPopulationFormatted(populationFormatted);\r\n  }, [population]);\r\n\r\n  const max = Math.max(\r\n    ...population.map((progression) =>\r\n      Math.max(\r\n        ...progression.notes.map((chord) =>\r\n          Math.max(...chord.chord.map((note) => note.hight), chord.root.hight)\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  const min = Math.min(\r\n    ...population.map((progression) =>\r\n      Math.min(\r\n        ...progression.notes.map((chord) =>\r\n          Math.min(...chord.chord.map((note) => note.hight), chord.root.hight)\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  return (\r\n    <Jumbotron className=\"p-4\">\r\n      <Container>\r\n        {populationFormatted.map((row, i) => {\r\n          return (\r\n            <Row key={i}>\r\n              {row.map((progression, j) => {\r\n                return (\r\n                  <Col\r\n                    className=\"m-1 midi-field p-2 pb-3\"\r\n                    key={j}\r\n                    style={{ height: \"170px\", \"min-width\": \"150px\" }}\r\n                  >\r\n                    <MidiDisplay\r\n                      progression={progression}\r\n                      index={i * numberPerRow + j}\r\n                      max={max}\r\n                      min={min}\r\n                    />\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          );\r\n        })}\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","export class Genome{\r\n    constructor(chords, rythm, scale){\r\n        let chordNotes = chords.map(chord => chord.chord)\r\n        if(!chordNotes.flat()){\r\n            chordNotes = chords.map(chord => chord.root)\r\n        }\r\n        //const notes = [...new Set(chordNotes.flat())]\r\n        //let mean = notes.reduce((a, b) => a + b) / notes.length;\r\n        const length = rythm.reduce((a, b) => a + b);\r\n        \r\n        this.scale= scale\r\n        this.length= length\r\n        this.switches= rythm.length\r\n        //this.mean= mean\r\n    }\r\n}","export const rythms = [\r\n    1/8,\r\n    1/4,\r\n    1/2,\r\n    3/4,\r\n    1,\r\n    2,\r\n    3,\r\n    4\r\n]\r\n\r\nexport function mapRythm(input){\r\n    let output = []\r\n    let sum = input\r\n    while(sum!==0){\r\n        for(let i = rythmMap.length-1; i >= 0; i--){\r\n            const currentValue = 1/parseInt(rythmMap[i])\r\n            if(sum>=currentValue){\r\n                output.push(rythmMap[i])\r\n                sum-=currentValue\r\n                break\r\n            }\r\n        }\r\n    }\r\n    return output\r\n}\r\n\r\nexport const rythmMap = [\r\n    '64',\r\n    '32',\r\n    '16',\r\n    '8',\r\n    '4',\r\n    '2',\r\n    '1',\r\n]\r\n// const lengths = [2,4,8]\r\n\r\nexport function constructRythm(length, window){\r\n    let currentLength = 0;\r\n    let rythmStructure = []\r\n    let previousValue= 0\r\n\r\n    const max = window.max\r\n    const min = window.min\r\n    while(currentLength<length){\r\n        let diff = 0 ;\r\n        let randomNumber = Math.floor(Math.random() *  (max-min))+min \r\n        if(Math.random()<0.4 && previousValue!==0){\r\n            randomNumber = previousValue\r\n        } else {\r\n            previousValue = randomNumber\r\n        }\r\n\r\n        if(currentLength+rythms[randomNumber]-diff>length){\r\n            diff = length - currentLength\r\n            rythmStructure.push({rythm: diff,beginning: currentLength})\r\n            currentLength+=diff\r\n            return rythmStructure\r\n        }\r\n\r\n        rythmStructure.push({rythm: rythms[randomNumber]-diff,beginning: currentLength})\r\n        currentLength+=rythms[randomNumber]-diff\r\n    }\r\n\r\n    return rythmStructure\r\n}","const notesMap = [\r\n    'C',\r\n    'C#',\r\n    'D',\r\n    'D#',\r\n    'E',\r\n    'F',\r\n    'F#',\r\n    'G',\r\n    'G#',\r\n    'A',\r\n    'A#',\r\n    'B'\r\n  ]\r\n\r\nexport class Note{\r\n    constructor(hight, start, duration) {\r\n        this.hight = hight\r\n        this.start = start\r\n        this.end = start+duration\r\n        this.duration = duration\r\n\r\n        const octave = Math.floor(hight/12);\r\n        const note = notesMap[hight%12];\r\n        this.note = note+octave.toString();\r\n    }\r\n\r\n    existsInWindow(window){\r\n        if((window[0]>this.start && window[0]<this.end)||(window[1]>this.start && window[1]<=this.end)){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}","const maj = 'major'\r\nconst min = 'minor'\r\n\r\n\r\nexport const scales = {\r\n    major: {\r\n        notes: [0,2,4,5,7,9,11],\r\n        mode: [maj,min, min, maj, maj, min, min]\r\n    }\r\n}\r\n\r\nexport const chords = {\r\n    major:[0,4,7,2,11,6,9,1,8,3,10,5],\r\n    minor:[0,3,7,2,10,5,9,4,11,6,8,1]\r\n}\r\n\r\nexport function RandomChord(octave,scaleType,numberOfNotes, jazziness){\r\n    const scale = scales[scaleType]\r\n    const randomNote = Math.floor(Math.random() * scale.notes.length);\r\n\r\n    const mode = scale.mode[randomNote]\r\n    let rootNote = scale.notes[randomNote]\r\n\r\n    if(numberOfNotes===0){\r\n        rootNote+=12*3\r\n        return {root: rootNote, chord: []}\r\n    }\r\n    let chord = randomVoicing(rootNote,mode, numberOfNotes,scale.notes,jazziness,octave)\r\n\r\n    let transposed = chord.map(x => x + 12*(3+octave))\r\n    if(Math.random()-(1/4)>rootNote/12)\r\n        rootNote+=12\r\n\r\n    return {chord: transposed, root: rootNote+12}\r\n}\r\n\r\nfunction randomVoicing(root,mode,numberOfNotes, scale, jazziness=5, octave, dispersion = 0){\r\n    let chord = []\r\n    let overload=0\r\n    for(let i = 0; i<numberOfNotes; i++){\r\n        const choice = Math.floor(Math.random() * jazziness + Math.floor(overload/(jazziness*2)))\r\n        let note = chords[mode][choice];\r\n        note += root\r\n        if(Math.random()<(((choice/(1+octave))/12) - dispersion)){\r\n            note+=12\r\n        }\r\n        if(Math.random()<(((note/2*(1+octave))/12) - dispersion) && choice!==0){\r\n            note-=12\r\n        }\r\n\r\n        if (chord.includes(note) || !scale.includes(note%12))\r\n        {\r\n            overload++\r\n            i--\r\n            continue\r\n        }\r\n        overload=0\r\n        chord.push(note)\r\n    }\r\n    return chord\r\n}","import * as Tone from \"tone\";\r\n\r\nconst gain = new Tone.Gain(0.2).toDestination();\r\nconst filter = new Tone.Filter({\r\n  frequency: 1000,\r\n  type: \"lowpass\",\r\n  rolloff: -12,\r\n  Q: 0,\r\n}).connect(gain);\r\n\r\nvar isPlaying = 0;\r\nvar tempo = 120;\r\n\r\nexport function getPlaying() {\r\n  return isPlaying;\r\n}\r\n\r\nexport let currentlyPlaying = null;\r\n\r\nexport function setPlaying(x) {\r\n  isPlaying = x;\r\n}\r\n\r\nexport function getTempo() {\r\n  return tempo;\r\n}\r\n\r\nexport function setTempo(x) {\r\n  tempo = x;\r\n}\r\n\r\nexport const synth = new Tone.PolySynth(Tone.Synth, {\r\n  oscillator: {\r\n    count: 2,\r\n    spread: 5,\r\n    type: \"sawtooth\",\r\n  },\r\n  // envelope: {\r\n  //   attack: 0.01,\r\n  //   decay: 15,\r\n  //   sustain: 0.20,\r\n  //   release: 0.1,\r\n  // },\r\n  envelope: {\r\n    attack: 0.002,\r\n    decay: 0,\r\n    sustain: 1,\r\n    release: 0.1,\r\n  },\r\n}).connect(filter);\r\n\r\n// synth.sync()\r\n","import { Genome } from \"./genome\";\r\nimport { constructRythm, rythms, mapRythm } from \"./rythm\";\r\nimport { Note } from \"./note\";\r\nimport { RandomChord } from \"./chords\";\r\nimport { synth, getPlaying, setPlaying, getTempo } from \"./synth\";\r\nimport { constructVoicing } from \"./population\";\r\nimport * as Tone from \"tone\";\r\nimport midiWriter from \"midi-writer-js\";\r\nimport FileSaver from \"file-saver\";\r\n\r\nexport function createRandomProgression(\r\n  jazziness,\r\n  numberOfNotes,\r\n  noteLengths = 0,\r\n  progressionLength\r\n) {\r\n  let octave = 0;\r\n  let notes = [];\r\n  let lengths = constructRythm(progressionLength, noteLengths);\r\n  const scale = Math.floor(Math.random() * 12);\r\n  for (let i = 0; i < lengths.length; i++) {\r\n    const chord = RandomChord(octave, \"major\", numberOfNotes - 1, jazziness);\r\n    notes.push({\r\n      chord: chord.chord.map(\r\n        (x) => new Note(x + scale, lengths[i].beginning, lengths[i].rythm)\r\n      ),\r\n      root: new Note(\r\n        chord.root + scale,\r\n        lengths[i].beginning,\r\n        lengths[i].rythm\r\n      ),\r\n    });\r\n  }\r\n\r\n  const genome = new Genome(notes, lengths, scale);\r\n  return new Progression({\r\n    notes: notes,\r\n    rythm: lengths.map((x) => x.rythm),\r\n    genome: genome,\r\n  });\r\n}\r\n\r\nexport class Progression {\r\n  constructor({ rythm, genome, score = 1, notes, amIPlaying = false }) {\r\n    this.notes = notes;\r\n    this.rythm = rythm;\r\n    this.genome = genome;\r\n    this.score = score;\r\n\r\n    this.amIPlaying = amIPlaying;\r\n  }\r\n\r\n  getAllNotes() {\r\n    return this.notes.map((chord) => [...chord.chord, chord.root]).flat();\r\n  }\r\n\r\n  play(callback) {\r\n    synth.sync();\r\n    if (Tone.Transport.state === \"stopped\") {\r\n      setPlaying(1);\r\n      let end = 0;\r\n      const notes = this.getAllNotes();\r\n      for (let i = 0; i < notes.length; i++) {\r\n        synth.triggerAttack(\r\n          notes[i].note,\r\n          (notes[i].start * 2 * 120) / getTempo()\r\n        );\r\n        synth.triggerRelease(\r\n          [notes[i].note],\r\n          (notes[i].end * 2 * 120) / getTempo()\r\n        );\r\n        if (notes[i].end > end) end = notes[i].end;\r\n      }\r\n      Tone.Transport.start();\r\n      callback();\r\n      clearTimeout(getPlaying().timeout);\r\n      setPlaying({\r\n        timeout: setTimeout(function () {\r\n          callback();\r\n          synth.releaseAll();\r\n          Tone.Transport.stop();\r\n          Tone.Transport.cancel();\r\n        }, (end * 2 * 1000 * 120) / getTempo()),\r\n        whichOne: () => callback(),\r\n      });\r\n    } else {\r\n      clearTimeout(getPlaying().timeout);\r\n      Tone.Transport.stop();\r\n      Tone.Transport.cancel();\r\n      synth.releaseAll();\r\n      if (!this.amIPlaying) {\r\n        if (getPlaying().whichOne) getPlaying().whichOne();\r\n        this.play(callback);\r\n      } else {\r\n        if (getPlaying().whichOne) getPlaying().whichOne();\r\n      }\r\n    }\r\n  }\r\n\r\n  stop(){\r\n    clearTimeout(getPlaying().timeout);\r\n    Tone.Transport.stop();\r\n    Tone.Transport.cancel();\r\n    synth.releaseAll();\r\n  }\r\n\r\n  compare(progression) {\r\n    const notes = progression.getAllNotes().map((note) => JSON.stringify(note));\r\n    const thisNotes = this.getAllNotes().map((note) => JSON.stringify(note));\r\n    let counter = 0;\r\n    for (let i = 0; i < notes.length; i++) {\r\n      if (thisNotes.includes(notes[i])) counter++;\r\n    }\r\n    if (counter === notes.length) return true;\r\n    return false;\r\n  }\r\n\r\n  download() {\r\n    var track = new midiWriter.Track();\r\n\r\n    for (let i = 0; i < this.notes.length; i++) {\r\n      track.addEvent(\r\n        [\r\n          new midiWriter.NoteEvent({\r\n            pitch: [\r\n              ...this.notes[i].chord.map((x) => x.note),\r\n              this.notes[i].root.note,\r\n            ],\r\n            duration: mapRythm(this.rythm[i]),\r\n          }),\r\n        ],\r\n        function (event, index) {\r\n          return { sequential: false };\r\n        }\r\n      );\r\n    }\r\n\r\n    var write = new midiWriter.Writer(track);\r\n    let blob;\r\n    blob = new Blob([write.buildFile()], {\r\n      type: \"audio/midi\",\r\n    });\r\n    FileSaver.saveAs(blob, \"midi\");\r\n  }\r\n\r\n  transpose(scale) {\r\n    const diff = scale - this.genome.scale;\r\n    const notes = this.notes.map((chord) => {\r\n      return {\r\n        chord: chord.chord.map(\r\n          (x) => new Note(x.hight + diff, x.start, x.duration)\r\n        ),\r\n        root: new Note(\r\n          chord.root.hight + diff,\r\n          chord.root.start,\r\n          chord.root.duration\r\n        ),\r\n      };\r\n    });\r\n    const genome = new Genome(notes, this.rythm, this.genome.scale + diff);\r\n    return new Progression({ ...this, genome, notes });\r\n  }\r\n\r\n  mutate(jazziness, noteLengths, mutationChance) {\r\n    let newProgression = this.mutateScale();\r\n    newProgression = this.mutateRythm(mutationChance, jazziness, noteLengths);\r\n    newProgression = this.mutateMelody(mutationChance, jazziness);\r\n    return newProgression;\r\n  }\r\n\r\n  mutateMelody(p, jazziness) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      if (Math.random() < p && i < this.rythm.length - 1) {\r\n        const tmp = RandomChord(\r\n          0,\r\n          \"major\",\r\n          this.notes[0].chord.length,\r\n          jazziness\r\n        );\r\n        const root = new Note(\r\n          tmp.root + this.genome.scale,\r\n          beginning,\r\n          this.rythm[i]\r\n        );\r\n        const chord = tmp.chord.map((x) => x + this.genome.scale);\r\n        notes.push({\r\n          chord: chord.map((note) => new Note(note, beginning, this.rythm[i])), // eslint-disable-line\r\n          root: new Note(root.hight, beginning, this.rythm[i]),\r\n        });\r\n        newRythm.push(this.rythm[i]);\r\n        beginning += this.rythm[i];\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    const genome = new Genome(notes, newRythm, this.genome.scale);\r\n    return new Progression({ ...this, genome, notes, rythm: newRythm });\r\n  }\r\n\r\n  mutateScale() {\r\n    const newScale = Math.floor(Math.random() * 3) - 1 + this.genome.scale;\r\n    return this.transpose(newScale);\r\n  }\r\n\r\n  mutateRythm(p, jazziness, window) {\r\n    let temp;\r\n    const [tempNewRythm, tempNotes] = this.joinChord(p, jazziness);\r\n    temp = new Progression({ ...this, notes: tempNotes, rythm: tempNewRythm });\r\n    const [newRythm, notes] = temp.breakChord(p, jazziness, window);\r\n    const genome = new Genome(notes, newRythm, this.genome.scale);\r\n    return new Progression({ ...this, genome, notes, rythm: newRythm });\r\n  }\r\n\r\n  breakChord(p, jazziness, window) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    const max = window.max;\r\n    const min = window.min;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      let avaibleRythms = [];\r\n      rythms.forEach((x, index) => {\r\n        if (x < this.rythm[i] && index < max && index >= min)\r\n          avaibleRythms.push(x);\r\n      });\r\n      if (Math.random() < p && avaibleRythms.length > 0) {\r\n        const choice =\r\n          avaibleRythms[Math.floor(Math.random() * avaibleRythms.length)];\r\n\r\n        const tmp = RandomChord(\r\n          0,\r\n          \"major\",\r\n          this.notes[0].chord.length,\r\n          jazziness\r\n        );\r\n        const root = new Note(\r\n          tmp.root + this.genome.scale,\r\n          beginning,\r\n          this.rythm[i]\r\n        );\r\n        const chord = tmp.chord.map((x) => x + this.genome.scale);\r\n\r\n        if (Math.round(Math.random()) <= 2) {\r\n          notes.push({\r\n            chord: this.notes[i].chord.map(\r\n              (note) => new Note(note.hight, beginning, choice) // eslint-disable-line\r\n            ),\r\n            root: new Note(this.notes[i].root.hight, beginning, choice),\r\n          });\r\n          notes.push({\r\n            chord: chord.map(\r\n              (note) => // eslint-disable-line\r\n                new Note(note, beginning + choice, this.rythm[i] - choice)\r\n            ),\r\n            root: new Note(\r\n              root.hight,\r\n              beginning + choice,\r\n              this.rythm[i] - choice\r\n            ),\r\n          });\r\n          newRythm.push(this.rythm[i] - choice);\r\n          newRythm.push(choice);\r\n        } else {\r\n          notes.push({\r\n            chord: chord.map((note) => new Note(note, beginning, choice)), // eslint-disable-line\r\n            root: new Note(root.hight, beginning, choice),\r\n          });\r\n          notes.push({\r\n            chord: this.notes[i].chord.map(\r\n              (note) => // eslint-disable-line\r\n                new Note(note.hight, beginning + choice, this.rythm[i] - choice) \r\n            ),\r\n            root: new Note(\r\n              this.notes[i].root.hight,\r\n              beginning + choice,\r\n              this.rythm[i] - choice\r\n            ),\r\n          });\r\n          newRythm.push(choice);\r\n          newRythm.push(this.rythm[i] - choice);\r\n        }\r\n\r\n        beginning += this.rythm[i];\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    return [newRythm, notes];\r\n  }\r\n\r\n  joinChord(p, jazziness) {\r\n    let newRythm = [];\r\n    let notes = [];\r\n    let beginning = 0;\r\n    for (let i = 0; i < this.rythm.length; i++) {\r\n      if (Math.random() < p && i < this.rythm.length - 1) {\r\n        const chordsToJoin = [\r\n          ...this.notes[i].chord,\r\n          ...this.notes[i + 1].chord,\r\n        ];\r\n        const root = this.notes[i + Math.round(Math.random())].root;\r\n        const chord = constructVoicing(\r\n          chordsToJoin,\r\n          root,\r\n          this.genome.scale,\r\n          jazziness,\r\n          this.notes[i].chord.length\r\n        );\r\n        notes.push({\r\n          chord: chord.map(\r\n            (note) => // eslint-disable-line\r\n              new Note(note, beginning, this.rythm[i] + this.rythm[i + 1])\r\n          ),\r\n          root: new Note(\r\n            root.hight,\r\n            beginning,\r\n            this.rythm[i] + this.rythm[i + 1]\r\n          ),\r\n        });\r\n        newRythm.push(this.rythm[i] + this.rythm[i + 1]);\r\n        beginning += this.rythm[i] + this.rythm[i + 1];\r\n        i++;\r\n        continue;\r\n      }\r\n      newRythm.push(this.rythm[i]);\r\n      beginning += this.rythm[i];\r\n      notes.push(this.notes[i]);\r\n    }\r\n    return [newRythm, notes];\r\n  }\r\n}\r\n","import {createRandomProgression, Progression} from './progression'\r\nimport { Genome } from './genome'\r\nimport { Note } from './note'\r\nimport {scales, chords} from './chords'\r\n\r\nexport function createPopulation(size,jazziness, numberOfNotes, noteLengths, progressionLength) {\r\n    const population = []\r\n\r\n    for(let i =0; i<size; i++){\r\n        population.push(createRandomProgression(jazziness, numberOfNotes, noteLengths, progressionLength))\r\n    }\r\n    return population\r\n}\r\n\r\nexport function newGeneration(population, populationSize, jazziness, noteLengths, length, mutationChance){\r\n    let newPopulation = []\r\n    for(let i = 0; i<populationSize; i++){\r\n        const roulette = createRoulette(population.map(x => x.score))\r\n\r\n        const pick1 = pickSpeciman(roulette)\r\n        const pick2 = pickSpeciman(roulette)\r\n\r\n        const spec1 = population[pick1]\r\n        const spec2 = population[pick2]\r\n    \r\n        const crossed = cross(spec1,spec2, jazziness, length)\r\n        const mutated = crossed.mutate(jazziness, noteLengths, mutationChance)\r\n\r\n        let decision = 1\r\n        for(let j = 0; j<newPopulation.length; j++){\r\n            if(newPopulation[j].compare(mutated)){\r\n                i--\r\n                decision = 0\r\n                break\r\n            }\r\n        }\r\n        if(decision===1)\r\n            newPopulation.push(mutated)\r\n    }\r\n    return newPopulation\r\n}\r\n\r\nfunction createRoulette(scores){\r\n    const max = scores.reduce((a, b) => a + b);\r\n    const probabilities = scores.map(score => score/max)\r\n    return probabilities\r\n}\r\n\r\nfunction pickSpeciman(roulette){\r\n    const pick = Math.random();\r\n    let acc = 0\r\n    let i = 0\r\n    while(acc<pick){\r\n        acc += roulette[i]\r\n        i++\r\n    }\r\n    return i-1\r\n}\r\n\r\nexport function cross(prog1, prog2, jazziness, length){\r\n    const max = Math.max(prog1.genome.scale, prog2.genome.scale)\r\n    const min = Math.min(prog1.genome.scale, prog2.genome.scale)\r\n\r\n    const newScale = Math.floor(Math.random() * (max - min)) + min;\r\n\r\n    const prog1Transposed = prog1.transpose(newScale)\r\n    const prog2Transposed = prog2.transpose(newScale)\r\n\r\n    const newRythm = crossRythms(prog1Transposed.getAllNotes(), prog2Transposed.getAllNotes(), length)\r\n\r\n    const newMelody = crossMelodies(prog1Transposed, prog2Transposed, newRythm, newScale, prog1.notes[0].chord.length,jazziness)\r\n\r\n    const notes = buildNotes(newRythm, newMelody)\r\n\r\n    const genome = new Genome(notes, newRythm, newScale)\r\n    return new Progression({notes: notes, rythm: newRythm, genome: genome })\r\n}\r\n\r\nfunction crossMelodies(notes1, notes2, newRythm, originalScale, numberOfNotes, jazziness){\r\n    let newTimeline = 0\r\n    let newChords = []\r\n    for(let i=0; i<newRythm.length; i++){\r\n        const window=[newTimeline, newTimeline+newRythm[i]]\r\n\r\n        let candidates = []\r\n        notes1.notes.forEach(chord => {\r\n            if(chord.root.existsInWindow(window))\r\n                return candidates.push(chord.root)\r\n            return null\r\n        })\r\n\r\n        notes2.notes.forEach(chord => {\r\n            if(chord.root.existsInWindow(window))\r\n                return candidates.push(chord.root)\r\n            return null\r\n        })\r\n\r\n        candidates =  [...new Set(candidates)]\r\n\r\n        const choice = Math.floor(Math.random()*candidates.length)\r\n        const root = candidates[choice]\r\n\r\n        candidates = []\r\n        notes2.notes.forEach(chord => {\r\n            chord.chord.forEach(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note)\r\n            return null\r\n            })\r\n        })\r\n\r\n        notes1.notes.forEach(chord => {\r\n            chord.chord.forEach(note => {\r\n            if(note.existsInWindow(window))\r\n                return candidates.push(note)\r\n            return null\r\n            })\r\n        })\r\n\r\n        candidates =  [...new Set(candidates)]\r\n        const chord = constructVoicing(candidates, root, originalScale, jazziness, numberOfNotes)\r\n\r\n        newChords.push({chord,root:root.hight})\r\n        newTimeline += newRythm[i]\r\n    }\r\n    return newChords\r\n}\r\n\r\nexport function buildNotes(rythm, notes){\r\n    let newNotes = [] \r\n    let beginning = 0\r\n    for(let i = 0; i<rythm.length; i++){\r\n        const chord = notes[i]\r\n        newNotes.push({chord: chord.chord.map(x=>new Note(x,beginning, rythm[i])), root: new Note(chord.root,beginning, rythm[i])}) // eslint-disable-line\r\n        beginning+=rythm[i]\r\n    }\r\n    return newNotes\r\n}\r\n\r\nexport function constructVoicing(candidates, root, originalScale, jazziness, numberOfNotes){\r\n    const scale = scales['major']\r\n    const transposedRoot = (root.hight-originalScale)%12\r\n    const mode = scale.mode[scale.notes.indexOf(transposedRoot)]\r\n    let chord = []\r\n    let overload=0\r\n    for(let j = 0 ; j<numberOfNotes; j++ ){\r\n        const choice = candidates[Math.floor(Math.random()*candidates.length)].hight\r\n        if (chord.includes(choice) || !chords[mode].slice(0,jazziness + Math.floor(overload/(jazziness*2))).includes(((choice-root.hight)%12)))\r\n        {\r\n            overload++\r\n            j--\r\n            continue\r\n        }\r\n        overload=0\r\n        chord.push(choice)\r\n    }\r\n    return chord\r\n}\r\n\r\nfunction crossRythms(notes1, notes2, length){\r\n    let newRythm = []\r\n    let timeline = 0\r\n    let ends = [notes1.map(note => note.end).sort(),notes2.map(note => note.end).sort()]\r\n\r\n    while(timeline<length){\r\n        let choice = Math.round(Math.random())\r\n        for(let i = 0; i< ends[choice].length; i++){\r\n            if(ends[choice][i]>timeline){\r\n                newRythm.push(ends[choice][i]-timeline)\r\n                timeline = ends[choice][i]\r\n                break;\r\n            }\r\n            if(i===ends[choice].length-1){\r\n                newRythm.push(ends[choice][i]-timeline)\r\n                timeline = ends[choice][i]\r\n            }\r\n        }\r\n    }\r\n    return newRythm\r\n}\r\n","import React from 'react';\r\nimport {Button} from '@material-ui/core';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\nimport { newGeneration} from '../genetic/population'\r\nimport {addSpeciman, deletePopulation} from '../actions/populationActions'\r\n\r\nfunction NewGeneration({updateGeneration, params}){\r\n  const dispatch = useDispatch()\r\n  \r\n    const population = useSelector(state => {\r\n        return state.population\r\n    })\r\n\r\n    const nextGen = () => {\r\n        dispatch(deletePopulation())\r\n        newGeneration(population, params.populationSize, params.jazziness, {min:params.windowmin,max:params.windowmax},params.progressionLength, params.mutationChance).map(x => dispatch(addSpeciman(x)))\r\n        updateGeneration()\r\n    }\r\n\r\n  return (\r\n    <Button className='m-1' variant=\"contained\" color=\"primary\" onClick={nextGen}>\r\n        KOLEJNA GENERACJA  <ArrowForwardIcon/>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default NewGeneration;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Jumbotron, Container, Row, Col } from \"reactstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Select,\r\n  MenuItem,\r\n  InputLabel,\r\n  Card,\r\n} from \"@material-ui/core\";\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport { createPopulation } from \"../genetic/population\";\r\nimport { addSpeciman, deletePopulation } from \"../actions/populationActions\";\r\nimport NewGeneration from \"./NewGeneration\";\r\nimport { setTempo } from \"../genetic/synth\";\r\nimport { rythms } from \"../genetic/rythm\";\r\n\r\nfunction ControlPanel() {\r\n  const [generation, setGeneration] = useState(0);\r\n\r\n  const [state, setState] = useState({\r\n    populationSize: 8,\r\n    mutationChance: 0.1,\r\n    jazziness: 4,\r\n    numberOfNotes: 3,\r\n    progressionLength: 4,\r\n    windowmin: rythms[1],\r\n    windowmax: rythms[4],\r\n  });\r\n\r\n  const [tempo, settempo] = useState(120);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  let disabled = 0;\r\n  if (generation > 0) disabled = 1;\r\n\r\n  const handleChange = (e) => {\r\n    let contraint = false;\r\n    let value = parseFloat(e.target.value);\r\n\r\n    if (value > 0) {\r\n      if (e.target.name === \"tempo\") {\r\n        settempo(value);\r\n        setTempo(value);\r\n      } else if (!contraint)\r\n        setState({\r\n          ...state,\r\n          [e.target.name]: value,\r\n        });\r\n    }\r\n  };\r\n\r\n  const updateGeneration = () => {\r\n    setGeneration(generation + 1);\r\n  };\r\n\r\n  const restart = () => {\r\n    setGeneration(0);\r\n    dispatch(deletePopulation());\r\n    createPopulation(\r\n      state.populationSize,\r\n      state.jazziness,\r\n      state.numberOfNotes,\r\n      {\r\n        min: rythms.indexOf(state.windowmin),\r\n        max: rythms.indexOf(state.windowmax),\r\n      },\r\n      state.progressionLength\r\n    ).map((x) => dispatch(addSpeciman(x)));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (generation === 0) restart();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [state]);\r\n\r\n  return (\r\n    <Jumbotron className=\"p-4\">\r\n      <Container>\r\n        <Row>\r\n          <h2>Pokolenie: {generation}</h2>\r\n        </Row>\r\n        <hr />\r\n        <Row className=\"p-3\">\r\n          <Col className=\"pb-1\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                name=\"populationSize\"\r\n                label=\"Rozmiar populacji\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.populationSize}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 0, max: 1, step: 0.05 } }}\r\n                name=\"mutationChance\"\r\n                label=\"Szansa mutacji\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.mutationChance}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                name=\"tempo\"\r\n                label=\"Tempo\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={tempo}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{\r\n                  inputProps: { min: state.numberOfNotes, max: 12 },\r\n                }}\r\n                name=\"jazziness\"\r\n                label=\"Złożoność akordów\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.jazziness}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <InputLabel className=\"m-0\" shrink>\r\n                Min. długość nuty\r\n              </InputLabel>\r\n              <Select\r\n                className=\"w-100\"\r\n                name=\"windowmin\"\r\n                value={state.windowmin}\r\n                onChange={handleChange}\r\n              >\r\n                {rythms.map((rythm, index) => {\r\n                  if (rythm < state.windowmax)\r\n                    return (\r\n                      <MenuItem key={index} value={rythm}>\r\n                        {rythm}\r\n                      </MenuItem>\r\n                    );\r\n                  else return null;\r\n                })}\r\n              </Select>\r\n              <InputLabel className=\"m-0\" shrink>\r\n                Max. długość nuty\r\n              </InputLabel>\r\n              <Select\r\n                className=\"w-100\"\r\n                name=\"windowmax\"\r\n                value={state.windowmax}\r\n                onChange={handleChange}\r\n              >\r\n                {rythms.map((rythm, index) => {\r\n                  if (rythm > state.windowmin)\r\n                    return (\r\n                      <MenuItem key={index} value={rythm}>\r\n                        {rythm}\r\n                      </MenuItem>\r\n                    );\r\n                  else return null;\r\n                })}\r\n              </Select>\r\n            </Card>\r\n          </Col>\r\n          <Col className=\"pb-3\" style={{ \"min-width\": \"200px\" }}>\r\n            <Card className=\"p-2\">\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1, max: 10 } }}\r\n                disabled={disabled}\r\n                name=\"numberOfNotes\"\r\n                label=\"Liczba nut w akordzie\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.numberOfNotes}\r\n              />\r\n              <TextField\r\n                className=\"w-100\"\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                disabled={disabled}\r\n                name=\"progressionLength\"\r\n                label=\"Długość frazy\"\r\n                type=\"number\"\r\n                onChange={handleChange}\r\n                value={state.progressionLength}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <Button\r\n                className=\"m-1\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={restart}\r\n              >\r\n                Zacznij od nowa <ReplayIcon />\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Col>\r\n            <div className=\"d-flex justify-content-center\">\r\n              <NewGeneration\r\n                updateGeneration={updateGeneration}\r\n                params={{\r\n                  ...state,\r\n                  windowmin: rythms.indexOf(state.windowmin),\r\n                  windowmax: rythms.indexOf(state.windowmax),\r\n                }}\r\n              />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React, {useEffect, useState} from 'react';\r\nimport MidiDisplay from './MidiDisplay';\r\nimport {Jumbotron, Container, Row, Col} from 'reactstrap'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { cross } from '../genetic/population'\r\n\r\nfunction Test() {\r\n\r\n    const [child, setChild] = useState(null)\r\n    const population = useSelector(state => {\r\n        return state.population\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(population.length>1){\r\n            setChild(cross(population[0], population[1]))\r\n        }\r\n      }, [population]);\r\n    // population[0].notes = population[0].notes.map(x=>x.map(x=>50))\r\n    // population[0].notes2 = population[0].notes2.map(x=> x= new Note(50, x.start, x.duration))\r\n\r\nif (!child){\r\n    return null\r\n}\r\n  return (\r\n    <Jumbotron>\r\n        <Container>\r\n            <Row className='p-3'>\r\n                <Col><h2>Debug</h2></Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Parent 1:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={population[0]} index={0}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Parent 2:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={population[1]} index={1}/>\r\n                </Col>\r\n            </Row>\r\n            <Row className='p-3'>\r\n                <h4>Child:</h4>\r\n            </Row>\r\n            <Row>\r\n                <Col style={{height:\"300px\"}}>\r\n                    <MidiDisplay progression={child}/>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Test;\r\n","import Grid from './Grid'\nimport ControlPanel from './ControlPanel'\nimport Test from './Test'\nimport '../style/App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#c62828',\n    },\n    secondary: {\n      main: '#181a1b'\n    },\n  },\n}\n);\n\nfunction App() {\n  return (\n    <ThemeProvider theme={theme}>\n      <ControlPanel/>\n      <Router>\n        <Switch>\n          <Route path=\"/test\">\n            <Test />\n          </Route>\n          <Route path=\"/\">\n            <Grid />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nApp.whyDidYouRender = true\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ADD_SPECIMAN, SET_SPECIMAN_SCORE, DELETE_POPULATION, SET_SPECIMAN_PLAYING } from \"../actions/actionTypes\";\r\nimport {Progression} from '../genetic/progression'\r\n\r\nconst initialState = [] ;\r\n\r\nconst populationReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_SPECIMAN: {\r\n        return [\r\n          ...state,\r\n          action.payload.speciman\r\n        ];\r\n      }\r\n\r\n      case DELETE_POPULATION: {\r\n        return [];\r\n      }\r\n\r\n      case SET_SPECIMAN_SCORE:{\r\n        return state.map((item, index) => {\r\n          if (index !== action.payload.index) {\r\n            return item\r\n          }\r\n          return new Progression({\r\n            ...item,\r\n            score: action.payload.score\r\n          })\r\n        })\r\n      }\r\n\r\n      case SET_SPECIMAN_PLAYING:{\r\n        return state.map((item, index) => {\r\n          if (index !== action.payload.index) {\r\n            return item\r\n          }\r\n          return new Progression({\r\n            ...item,\r\n            amIPlaying: !state[index].amIPlaying\r\n          })\r\n        })\r\n      }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default populationReducer;\r\n","import { combineReducers } from 'redux';\r\nimport populationReducer from \"./populationReducer\";\r\n\r\nexport default combineReducers({ population: populationReducer });\r\n","import { createStore } from 'redux';\r\nimport rootReducer from \"../reducers/index\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style/index.css';\n\nimport { Provider } from 'react-redux'\nimport store from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}