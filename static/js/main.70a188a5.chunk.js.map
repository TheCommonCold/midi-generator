{"version":3,"sources":["files/midi.mid","sound/rythm.js","sound/chords.js","sound/player.js","components/MidiDisplay.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["rythms","maj","min","scales","major","notes","mode","chords","minor","createRandomProgression","lengths","length","currentLength","rythmStructure","diff","randomNumber","Math","floor","random","push","constructRythm","i","RandomChord","rythm","octave","scaleType","numberOfNotes","jazziness","scale","randomNote","rootNote","transposed","chord","note","includes","randomVoicing","map","x","synth","Tone","toDestination","playProgression","delay","setTimeout","duration","now","triggerAttack","triggerRelease","playChord","makeGrid","height","progression","play","baseLine","cols","j","rows","style","toString","width","reverse","Container","Row","className","Col","Button","onClick","MidiDisplay","progressions","useEffect","a","fetch","midiFile","response","reader","body","getReader","read","result","results","midiParser","parse","value","console","log","noteBeginnings","track","event","filter","type","noteEndings","data","startTime","deltaTime","endTime","getData","App","Jumbotron","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70a188a5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/midi.9923a118.mid\";","const rythms = [1/2,3/4,1,3/2,2,3,4]\r\n// const lengths = [2,4,8]\r\n\r\nexport function constructRythm(length){\r\n    let currentLength = 0;\r\n    let rythmStructure = []\r\n    while(currentLength<length){\r\n        let diff = 0 ;\r\n        let randomNumber = Math.floor(Math.random() * rythms.length)\r\n\r\n        if(currentLength+rythms[randomNumber]-diff>length){\r\n            diff = length - currentLength\r\n            currentLength+=diff\r\n            rythmStructure.push(diff)\r\n            return rythmStructure\r\n        }\r\n\r\n        currentLength+=rythms[randomNumber]-diff\r\n        rythmStructure.push(rythms[randomNumber]-diff)\r\n    }\r\n\r\n    return rythmStructure\r\n}","import {constructRythm} from './rythm'\r\n\r\nconst maj = 'major'\r\nconst min = 'minor'\r\n\r\n\r\nconst scales = {\r\n    major: {\r\n        notes: [0,2,4,5,7,9,11],\r\n        mode: [maj,min, min, maj, maj, min, min]\r\n    }\r\n}\r\n\r\nconst chords = {\r\n    major:[0,4,7,2,11,18,21,13,20,15,22,17],\r\n    minor:[0,3,7,2,10,17,21,16,23,18,20,13]\r\n}\r\n\r\nexport function createRandomProgression(){\r\n    let chords = []\r\n    let lengths = constructRythm(8)\r\n    for(let i = 0; i<lengths.length; i++){\r\n        chords.push(RandomChord(1,'major',2,5))\r\n    }\r\n    return {chords, rythm: lengths}\r\n}\r\n\r\nexport function RandomChord(octave,scaleType,numberOfNotes, jazziness){\r\n    const scale = scales[scaleType]\r\n    const randomNote = Math.floor(Math.random() * scale.notes.length);\r\n\r\n    const mode = scale.mode[randomNote]\r\n    let rootNote = scale.notes[randomNote]\r\n\r\n    let chord = randomVoicing(mode, numberOfNotes,jazziness)\r\n\r\n    let transposed = chord.map(x => x + rootNote +36 + (12*octave))\r\n    if(Math.random()-(1/4)>rootNote/12)\r\n        rootNote+=12\r\n    transposed.push(rootNote+24)\r\n\r\n    return transposed\r\n}\r\n\r\nfunction randomVoicing(mode,numberOfNotes,jazziness=5){\r\n    let chord = []\r\n    for(let i = 0; i<numberOfNotes; i++){\r\n        let note = chords[mode][Math.floor(Math.random() * jazziness)];\r\n        if (chord.includes(note))\r\n        {\r\n            i--\r\n            continue\r\n        }\r\n        chord.push(note)\r\n    }\r\n    return chord\r\n}\r\n","import * as Tone from 'tone'\r\n\r\nconst synth = new Tone.PolySynth(Tone.Synth).toDestination();\r\n\r\n\r\nexport function playProgression(chords, rythm){\r\n  let lengths = rythm\r\n  let delay = 0\r\n  for(let i = 0; i<lengths.length; i++){\r\n      setTimeout(function(){ playChord(chords[i],lengths[i]*1000); }, delay*1000);\r\n      delay += lengths[i]\r\n  }\r\n}\r\n\r\nexport function playChord(chord,duration){\r\n  const now = Tone.now()\r\n  synth.triggerAttack(chord, now);\r\n  synth.triggerRelease(chord, now + duration);\r\n}\r\n\r\nexport function noteOn(midiNote, duration) {\r\n\r\n  var ac = new window.AudioContext();\r\n  var o = ac.createOscillator();\r\n  var g = ac.createGain();\r\n  var f = ac.createBiquadFilter();\r\n  const freq = Math.pow(2, (midiNote-69)/12)*440;\r\n  o.frequency.value = freq;\r\n  o.type = 'sawtooth';\r\n  o.connect(g);\r\n  g.gain.value = 0.25;\r\n  g.connect(f);\r\n  f.frequency.value = 1000;\r\n  f.connect(ac.destination)\r\n  o.start(0);\r\n  setTimeout(function(s) {s.stop(0)}, duration, o);\r\n\r\n  // var ac = new (window.AudioContext || window.webkitAudioContext);\r\n  // var freqs = [261.63, 329.63, 392.00];\r\n  // for(var i=0;i<freqs.length;i++) {\r\n  //   var o = ac.createOscillator();\r\n  //   var g = ac.createGain();\r\n  //   o.frequency.value = freqs[i];\r\n  //   o.connect(g);\r\n  //   g.gain.value = 0.25;\r\n  //   g.connect(ac.destination);\r\n  //   o.start(0);\r\n  //   setTimeout(function(s) {s.stop(0)}, 1000, o);\r\n  // }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport '../style/App.css';\r\nimport midiFile from '../files/midi.mid';\r\nimport midiParser from 'midi-parser-js';\r\nimport {Container, Row, Col, Button} from 'reactstrap'\r\nimport {createRandomProgression} from '../sound/chords'\r\nimport {playProgression} from '../sound/player'\r\n\r\n\r\nfunction makeGrid(height=60, progression){\r\n\r\n  const play = () => {\r\n    playProgression(progression.chords, progression.rythm)\r\n  }\r\n\r\n  const baseLine = 24\r\n  let cols = []\r\n  let length = 0\r\n  for(let j = 0; j<progression.rythm.length; j++ ){\r\n    length+=progression.rythm[j]\r\n  }\r\n  for(let j = 0; j<progression.chords.length; j++ ){\r\n    const chord = progression.chords[j]\r\n    let rows = []\r\n    for(let i = baseLine; i<height+baseLine; i++ ){\r\n      if(chord.includes(i))\r\n        rows.push(\r\n          <div style={{height: (1/height*100).toString()+'%', width:'100%', \"background-color\":'red'}}>\r\n          </div>)\r\n      else\r\n        rows.push(\r\n          <div style={{height: (1/height*100).toString()+'%', width:'100%'}}>\r\n          </div>)\r\n    }\r\n    cols.push(<div style={{height: '100%', width: (progression.rythm[j]/length*100).toString()+'%'}}>{rows.reverse()}</div>)\r\n  }\r\n  return (<Container>\r\n    <Row>\r\n    <Row className='w-100' style={{height:\"200px\"}}>{cols}</Row>\r\n    <Col>\r\n      <Button className='w-100' onClick={play}>Play progression</Button>\r\n      </Col>\r\n    </Row>\r\n  </Container>)\r\n}\r\n\r\nfunction MidiDisplay() {\r\n  const progressions = [createRandomProgression(),createRandomProgression(),createRandomProgression(),createRandomProgression()]\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n          const response = await fetch(midiFile)\r\n          const reader = response.body.getReader()\r\n          const result = await reader.read()\r\n          const results =  midiParser.parse(result.value)\r\n          console.log(results)\r\n          const noteBeginnings = results.track[0].event.filter(x => x.type===9 )\r\n          const noteEndings  = results.track[0].event.filter(x => x.type===8 )\r\n\r\n          let notes = []\r\n          for(let i = 0; i<noteBeginnings.length; i++){\r\n            for(let j = 0; j<noteBeginnings.length; j++){\r\n              if (noteBeginnings[i].data[0] === noteEndings[j].data[0]){\r\n                notes.push({note: noteBeginnings[i].data[0], startTime: noteBeginnings[i].deltaTime, endTime: noteEndings[j].deltaTime})\r\n              }\r\n            }\r\n          }\r\n\r\n        }\r\n        getData()\r\n      }, [])\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {progressions.map(progression => {\r\n          return (\r\n            <Col>\r\n            {makeGrid(48,progression)}\r\n          </Col>\r\n          )\r\n        })}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MidiDisplay;\r\n","import MidiDisplay from './MidiDisplay'\nimport '../style/App.css';\nimport {Jumbotron} from 'reactstrap'\n\n\nfunction App() {\n  return (\n    <Jumbotron>\n      <MidiDisplay/>\n    </Jumbotron>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}