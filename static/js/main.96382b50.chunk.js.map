{"version":3,"sources":["sound/player.js","components/MidiDisplay.jsx","sound/rythm.js","sound/chords.js","components/Grid.jsx","genetic/population.js","components/App.js","reportWebVitals.js","index.js"],"names":["gain","Tone","toDestination","filter","frequency","type","rolloff","Q","connect","synth","oscillator","count","spread","envelope","attack","decay","sustain","release","notesMap","playProgression","chords","rythm","lengths","delay","i","setTimeout","chord","duration","now","translatedNotes","notes","map","x","octave","Math","floor","toString","triggerAttack","releaseAll","playChord","length","MidiDisplay","props","useState","progression","score","setScore","cols","j","rows","height","includes","push","style","width","reverse","Container","className","Row","onClick","Col","Button","sm","rythms","maj","min","scales","major","mode","minor","createRandomProgression","currentLength","rythmStructure","diff","randomNumber","random","constructRythm","RandomChord","scale","note","scaleType","numberOfNotes","jazziness","randomNote","rootNote","transposed","root","choice","randomVoicing","Grid","populationFormatted","arr","splice","populationFormatter","size","population","createPopulation","row","App","Jumbotron","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96382b50.chunk.js","sourcesContent":["import * as Tone from 'tone'\r\n\r\nconst gain = new Tone.Gain(0.2).toDestination();\r\nconst filter = new Tone.Filter({frequency: 1000, type: \"lowpass\", rolloff: -12, Q: 0}).connect(gain);\r\n\r\nconst synth = new Tone.PolySynth(Tone.Synth,{\r\n  oscillator : {\r\n    count: 2,\r\n    spread: 5,\r\n    type : \"sawtooth\",\r\n  },\r\n  // envelope: {\r\n  //   attack: 0.01,\r\n  //   decay: 15,\r\n  //   sustain: 0.20,\r\n  //   release: 0.1,\r\n  // },\r\n    envelope: {\r\n    attack: 0.002,\r\n    decay: 0,\r\n    sustain: 1,\r\n    release: 0.1,\r\n  },\r\n}).connect(filter);\r\n\r\nconst notesMap = [\r\n  'C',\r\n  'C#',\r\n  'D',\r\n  'D#',\r\n  'E',\r\n  'F',\r\n  'F#',\r\n  'G',\r\n  'G#',\r\n  'A',\r\n  'A#',\r\n  'B'\r\n]\r\n\r\nexport function playProgression(chords, rythm){\r\n  let lengths = rythm\r\n  let delay = 0\r\n  for(let i = 0; i<lengths.length; i++){\r\n      setTimeout(function(){ playChord(chords[i],lengths[i]); }, delay*1000);\r\n      delay += lengths[i]\r\n  }\r\n}\r\n\r\nexport function playChord(chord,duration){\r\n  const now = Tone.now()\r\n  const translatedNotes = translateNumbersIntoNotes(chord)\r\n  synth.triggerAttack(translatedNotes, now);\r\n  synth.releaseAll ( now + duration);\r\n}\r\n\r\nfunction translateNumbersIntoNotes(notes){\r\n  return notes.map(x => {\r\n    const octave = Math.floor(x/12);\r\n    const note = notesMap[x%12];\r\n    return note+octave.toString();\r\n  })\r\n}\r\n\r\nexport function noteOn(midiNote, duration) {\r\n\r\n  var ac = new window.AudioContext();\r\n  var o = ac.createOscillator();\r\n  var g = ac.createGain();\r\n  var f = ac.createBiquadFilter();\r\n  const freq = Math.pow(2, (midiNote-69)/12)*440;\r\n  o.frequency.value = freq;\r\n  o.type = 'sawtooth';\r\n  o.connect(g);\r\n  g.gain.value = 0.25;\r\n  g.connect(f);\r\n  f.frequency.value = 1000;\r\n  f.connect(ac.destination)\r\n  o.start(0);\r\n  setTimeout(function(s) {s.stop(0)}, duration, o);\r\n\r\n  // var ac = new (window.AudioContext || window.webkitAudioContext);\r\n  // var freqs = [261.63, 329.63, 392.00];\r\n  // for(var i=0;i<freqs.length;i++) {\r\n  //   var o = ac.createOscillator();\r\n  //   var g = ac.createGain();\r\n  //   o.frequency.value = freqs[i];\r\n  //   o.connect(g);\r\n  //   g.gain.value = 0.25;\r\n  //   g.connect(ac.destination);\r\n  //   o.start(0);\r\n  //   setTimeout(function(s) {s.stop(0)}, 1000, o);\r\n  // }\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Container, Row, Col, Button} from 'reactstrap'\r\nimport {playProgression} from '../sound/player'\r\n\r\n\r\nfunction MidiDisplay(props){\r\n\r\n  const [score, setScore] = useState(props.progression.score)\r\n\r\n  const height = 60\r\n\r\n  const increaseScore = () => {\r\n    setScore(score+1)\r\n  }\r\n\r\n  const decreaseScore = () => {\r\n    setScore(score-1)\r\n  }\r\n\r\n  const play = () => {\r\n    playProgression(props.progression.notes.chords, props.progression.notes.rythm)\r\n  }\r\n\r\n  const baseLine = 12\r\n  let cols = []\r\n  let length = 0\r\n  for(let j = 0; j<props.progression.notes.rythm.length; j++ ){\r\n    length+=props.progression.notes.rythm[j]\r\n  }\r\n  for(let j = 0; j<props.progression.notes.chords.length; j++ ){\r\n    const chord = props.progression.notes.chords[j]\r\n    let rows = []\r\n    for(let i = baseLine; i<height+baseLine; i++ ){\r\n      if(chord.includes(i))\r\n        rows.push(\r\n          <div style={{height: (1/height*100).toString()+'%', width:'100%', \"background-color\":'red'}}>\r\n          </div>)\r\n      else\r\n        rows.push(\r\n          <div style={{height: (1/height*100).toString()+'%', width:'100%'}}>\r\n          </div>)\r\n    }\r\n    cols.push(<div style={{height: '100%', width: (props.progression.notes.rythm[j]/length*100).toString()+'%'}}>{rows.reverse()}</div>)\r\n  }\r\n  return (<Container className='p-0'>\r\n      <Row className='w-100 m-0' style={{height:\"200px\"}}>\r\n          <div className='vote up' onClick={increaseScore}><div className='vote-text'>ðŸ¡…</div></div>\r\n          <div className='vote down' onClick={decreaseScore}><div className='vote-text'>ðŸ¡‡</div></div>\r\n          {cols}\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <Button className='w-100 p-0' onClick={play}>Play</Button>\r\n        </Col>\r\n        <Col sm={1}>\r\n        {score}\r\n        </Col>\r\n      </Row>\r\n  </Container>)\r\n}\r\n\r\nexport default MidiDisplay;\r\n","const rythms = [1/2,3/4,1,3/2,2,3,4]\r\n// const lengths = [2,4,8]\r\n\r\nexport function constructRythm(length){\r\n    let currentLength = 0;\r\n    let rythmStructure = []\r\n    while(currentLength<length){\r\n        let diff = 0 ;\r\n        let randomNumber = Math.floor(Math.random() * rythms.length)\r\n\r\n        if(currentLength+rythms[randomNumber]-diff>length){\r\n            diff = length - currentLength\r\n            currentLength+=diff\r\n            rythmStructure.push(diff)\r\n            return rythmStructure\r\n        }\r\n\r\n        currentLength+=rythms[randomNumber]-diff\r\n        rythmStructure.push(rythms[randomNumber]-diff)\r\n    }\r\n\r\n    return rythmStructure\r\n}","import {constructRythm} from './rythm'\r\n\r\nconst maj = 'major'\r\nconst min = 'minor'\r\n\r\n\r\nconst scales = {\r\n    major: {\r\n        notes: [0,2,4,5,7,9,11],\r\n        mode: [maj,min, min, maj, maj, min, min]\r\n    }\r\n}\r\n\r\nconst chords = {\r\n    major:[0,4,7,2,11,6,9,1,8,3,10,5],\r\n    minor:[0,3,7,2,10,5,9,4,11,6,8,1]\r\n}\r\n\r\n\r\nexport function createRandomProgression(){\r\n    let chords = []\r\n    let lengths = constructRythm(8)\r\n    for(let i = 0; i<lengths.length; i++){\r\n        chords.push(RandomChord(0,'major',3,5))\r\n    }\r\n    const scale = Math.floor(Math.random() * 12)\r\n\r\n    chords = chords.map(chord => chord.map(note => note + scale))\r\n\r\n    return {chords, rythm: lengths}\r\n}\r\n\r\nexport function RandomChord(octave,scaleType,numberOfNotes, jazziness){\r\n    const scale = scales[scaleType]\r\n    const randomNote = Math.floor(Math.random() * scale.notes.length);\r\n\r\n    const mode = scale.mode[randomNote]\r\n    let rootNote = scale.notes[randomNote]\r\n\r\n    let chord = randomVoicing(rootNote,mode, numberOfNotes,scale.notes,jazziness)\r\n\r\n    let transposed = chord.map(x => x + 36 + (12*octave))\r\n    if(Math.random()-(1/4)>rootNote/12)\r\n        rootNote+=12\r\n    // transposed.push(rootNote+24)\r\n    transposed.push(rootNote+12)\r\n\r\n    return transposed\r\n}\r\n\r\nfunction randomVoicing(root,mode,numberOfNotes, scale, jazziness=5){\r\n    let chord = []\r\n    for(let i = 0; i<numberOfNotes; i++){\r\n        const choice = Math.floor(Math.random() * jazziness)\r\n        let note = chords[mode][choice];\r\n        note += root\r\n        if (chord.includes(note) || !scale.includes(note%12))\r\n        {\r\n            i--\r\n            continue\r\n        }\r\n        if(Math.random()<choice/24)\r\n            note+=12\r\n        chord.push(note)\r\n    }\r\n    return chord\r\n}\r\n","import React from 'react';\r\nimport MidiDisplay from './MidiDisplay';\r\nimport {Container, Row, Col} from 'reactstrap'\r\nimport {createPopulation} from '../genetic/population'\r\n\r\nfunction Grid(props) {\r\n\r\n    const numberPerRow = 4;\r\n    const population = createPopulation(16);\r\n\r\n    const populationFormatter = (arr) => {\r\n        let populationFormatted = []\r\n        while(arr.length) populationFormatted.push(arr.splice(0,numberPerRow));\r\n        return populationFormatted\r\n    }\r\n\r\n    const populationFormatted = populationFormatter(population)\r\n  return (\r\n    <Container>\r\n        {populationFormatted.map(row => {\r\n            return (\r\n                <Row>\r\n                    {\r\n                        row.map(progression => {\r\n                            return (\r\n                            <Col>\r\n                                <MidiDisplay progression={progression}/>\r\n                            </Col>\r\n                            )\r\n                        })\r\n                    }\r\n                </Row>\r\n            )\r\n        })}\r\n      <Row>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import {createRandomProgression} from '../sound/chords'\r\n\r\nexport function createPopulation(size) {\r\n    const population = []\r\n\r\n    for(let i =0; i<size; i++){\r\n        population.push({notes: createRandomProgression(), score: 0})\r\n    }\r\n    return population\r\n}\r\n","import Grid from './Grid'\nimport '../style/App.css';\nimport {Jumbotron} from 'reactstrap'\n\n\nfunction App() {\n  return (\n    <Jumbotron>\n      <Grid/>\n    </Jumbotron>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}